var Module=require("module"),path=require("path"),fs=require("fs"),nopt=require("nopt"),which=require("which"),mkdirp=require("mkdirp"),existsSync=fs.existsSync||path.existsSync,inputError=require("../../util/input-error"),matcherFor=require("../../util/file-matcher").matcherFor,Instrumenter=require("../../instrumenter"),Collector=require("../../collector"),formatOption=require("../../util/help-formatter").formatOption,hook=require("../../hook"),Reporter=require("../../reporter"),resolve=require("resolve"),configuration=require("../../config");function usage(a,b){console.error("\nUsage: "+a+" "+b+" [<options>] <executable-js-file-or-command> [-- <arguments-to-jsfile>]\n\nOptions are:\n\n"+[formatOption("--config <path-to-config>","the configuration file to use, defaults to .istanbul.yml"),formatOption("--root <path> ","the root path to look for files to instrument, defaults to ."),formatOption("-x <exclude-pattern> [-x <exclude-pattern>]",'one or more fileset patterns e.g. "**/vendor/**"'),formatOption("-i <include-pattern> [-i <include-pattern>]",'one or more fileset patterns e.g. "**/*.js"'),formatOption("--[no-]default-excludes","apply default excludes [ **/node_modules/**, **/test/**, **/tests/** ], defaults to true"),formatOption("--hook-run-in-context","hook vm.runInThisContext in addition to require (supports RequireJS), defaults to false"),formatOption("--post-require-hook <file> | <module>","JS module that exports a function for post-require processing"),formatOption("--report <format> [--report <format>] ","report format, defaults to lcov (= lcov.info + HTML)"),formatOption("--dir <report-dir>","report directory, defaults to ./coverage"),formatOption("--print <type>","type of report to print to console, one of summary (default), detail, both or none"),formatOption("--verbose, -v","verbose mode"),formatOption("--[no-]preserve-comments","remove / preserve comments in the output, defaults to false"),formatOption("--include-all-sources","instrument all unused sources after running tests, defaults to false"),formatOption("--[no-]include-pid","include PID in output coverage filename")].join("\n\n")+"\n");console.error("\n")}function run(d,a,o,f){var s={config:path,root:path,x:[Array,String],report:[Array,String],dir:path,verbose:Boolean,yui:Boolean,"default-excludes":Boolean,print:String,"self-test":Boolean,"hook-run-in-context":Boolean,"post-require-hook":String,"preserve-comments":Boolean,"include-all-sources":Boolean,"preload-sources":Boolean,i:[Array,String],"include-pid":Boolean},k=nopt(s,{v:"--verbose"},d,0),i={verbose:k.verbose,instrumentation:{root:k.root,"default-excludes":k["default-excludes"],excludes:k.x,"include-all-sources":k["include-all-sources"],"preload-sources":k["preload-sources"],"include-pid":k["include-pid"]},reporting:{reports:k.report,print:k.print,dir:k.dir},hooks:{"hook-run-in-context":k["hook-run-in-context"],"post-require-hook":k["post-require-hook"],"handle-sigint":k["handle-sigint"]}},r=configuration.loadFile(k.config,i),l=r.verbose,e=k.argv.remain,h=k["preserve-comments"],g=k["include-pid"],n,j,m,p=new Reporter(r),b,c;if(e.length===0){return f(inputError.create("Need a filename argument for the "+a+" command!"))}n=e.shift();j=e;if(!existsSync(n)){try{n=which.sync(n)}catch(q){return f(inputError.create("Unable to resolve file ["+n+"]"))}}else{n=path.resolve(n)}b=function(){process.argv=["node",n].concat(j);if(l){console.log("Running: "+process.argv.join(" "))}process.env.running_under_istanbul=1;Module.runMain(n,null,true)};c=r.instrumentation.excludes(true);if(o){m=path.resolve(r.reporting.dir());mkdirp.sync(m);p.dir=m;p.addAll(r.reporting.reports());if(r.reporting.print()!=="none"){switch(r.reporting.print()){case"detail":p.add("text");break;case"both":p.add("text");p.add("text-summary");break;default:p.add("text-summary");break}}c.push(path.relative(process.cwd(),path.join(m,"**","*")));matcherFor({root:r.instrumentation.root()||process.cwd(),includes:k.i||r.instrumentation.extensions().map(function(t){return"**/*"+t}),excludes:c},function(t,u){if(t){return f(t)}var B="$$cov_"+new Date().getTime()+"$$",y=new Instrumenter({coverageVariable:B,preserveComments:h}),z=y.instrumentSync.bind(y),w={verbose:l,extensions:r.instrumentation.extensions()},A=r.hooks.postRequireHook(),v;if(A){v=path.resolve(A)}else{if(k.yui){v=path.resolve(__dirname,"../../util/yui-load-hook")}}if(A){if(!existsSync(v)){try{v=resolve.sync(A,{basedir:process.cwd()})}catch(x){if(l){console.error("Unable to resolve ["+A+"] as a node module")}f(x);return}}}if(v){if(l){console.error("Use post-load-hook: "+v)}w.postLoadHook=require(v)(u,z,l)}if(k["self-test"]){hook.unloadRequireCache(u)}if(r.hooks.hookRunInContext()){hook.hookRunInThisContext(u,z,w)}hook.hookRequire(u,z,w);global[B]={};if(r.hooks.handleSigint()){process.once("SIGINT",process.exit)}process.once("exit",function(){var C=g?("-"+process.pid):"",E=path.resolve(m,"coverage"+C+".json"),F,D;if(typeof global[B]==="undefined"||Object.keys(global[B]).length===0){console.error("No coverage information was collected, exit without writing coverage information");return}else{D=global[B]}if(r.instrumentation.includeAllSources()){u.files.forEach(function(G){if(!D[G]){z(fs.readFileSync(G,"utf-8"),G);Object.keys(y.coverState.s).forEach(function(H){y.coverState.s[H]=0});D[G]=y.coverState}})}mkdirp.sync(m);if(r.reporting.print()!=="none"){console.error("=============================================================================");console.error("Writing coverage object ["+E+"]")}fs.writeFileSync(E,JSON.stringify(D),"utf8");F=new Collector();F.add(D);if(r.reporting.print()!=="none"){console.error("Writing coverage reports at ["+m+"]");console.error("=============================================================================")}p.write(F,true,f)});b()})}else{b()}}module.exports={run:run,usage:usage};