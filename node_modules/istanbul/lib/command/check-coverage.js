var nopt=require("nopt"),path=require("path"),fs=require("fs"),Collector=require("../collector"),formatOption=require("../util/help-formatter").formatOption,util=require("util"),utils=require("../object-utils"),filesFor=require("../util/file-matcher").filesFor,Command=require("./index"),configuration=require("../config");function isAbsolute(a){if(path.isAbsolute){return path.isAbsolute(a)}return path.resolve(a)===path.normalize(a)}function CheckCoverageCommand(){Command.call(this)}function removeFiles(e,a,b){var d={},c={};b.forEach(function(f){d[f]=true});Object.keys(e).forEach(function(g){var f=isAbsolute(g)?path.relative(a,g):g;f=path.normalize(f);if(d[f]!==true){c[g]=e[g]}});return c}CheckCoverageCommand.TYPE="check-coverage";util.inherits(CheckCoverageCommand,Command);Command.mix(CheckCoverageCommand,{synopsis:function(){return"checks overall/per-file coverage against thresholds from coverage JSON files. Exits 1 if thresholds are not met, 0 otherwise"},usage:function(){console.error("\nUsage: "+this.toolName()+" "+this.type()+" <options> [<include-pattern>]\n\nOptions are:\n\n"+[formatOption("--statements <threshold>","global statement coverage threshold"),formatOption("--functions <threshold>","global function coverage threshold"),formatOption("--branches <threshold>","global branch coverage threshold"),formatOption("--lines <threshold>","global line coverage threshold")].join("\n\n")+"\n");console.error("\n\n");console.error("Thresholds, when specified as a positive number are taken to be the minimum percentage required.");console.error("When a threshold is specified as a negative number it represents the maximum number of uncovered entities allowed.\n");console.error("For example, --statements 90 implies minimum statement coverage is 90%.");console.error("             --statements -10 implies that no more than 10 uncovered statements are allowed\n");console.error("Per-file thresholds can be specified via a configuration file.\n");console.error('<include-pattern> is a fileset pattern that can be used to select one or more coverage files for merge. This defaults to "**/coverage*.json"');console.error("\n")},run:function(e,i){var h={config:path,root:path,statements:Number,lines:Number,branches:Number,functions:Number,verbose:Boolean},a=nopt(h,{v:"--verbose"},e,0),b=configuration.loadFile(a.config,{verbose:a.verbose,check:{global:{statements:a.statements,lines:a.lines,branches:a.branches,functions:a.functions}}}),c="**/coverage*.json",f,d=new Collector(),g=[];if(a.argv.remain.length>0){c=a.argv.remain[0]}f=a.root||process.cwd();filesFor({root:f,includes:[c]},function(n,m){if(n){throw n}if(m.length===0){return i("ERROR: No coverage files found.")}m.forEach(function(r){var q=JSON.parse(fs.readFileSync(r,"utf8"));d.add(q)});var p={global:{statements:b.check.global.statements||0,branches:b.check.global.branches||0,lines:b.check.global.lines||0,functions:b.check.global.functions||0,excludes:b.check.global.excludes||[]},each:{statements:b.check.each.statements||0,branches:b.check.each.branches||0,lines:b.check.each.lines||0,functions:b.check.each.functions||0,excludes:b.check.each.excludes||[]}},l=d.getFinalCoverage(),o=utils.summarizeCoverage(removeFiles(l,f,p.global.excludes)),k=removeFiles(l,f,p.each.excludes);Object.keys(k).forEach(function(q){k[q]=utils.summarizeFileCoverage(k[q])});if(b.verbose){console.log("Compare actuals against thresholds");console.log(JSON.stringify({global:o,each:k,thresholds:p},undefined,4))}function j(r,s,q){["statements","branches","lines","functions"].forEach(function(v){var w=q[v].pct,u=q[v].total-q[v].covered,t=s[v];if(t<0){if(t*-1<u){g.push("ERROR: Uncovered count for "+v+" ("+u+") exceeds "+r+" threshold ("+-1*t+")")}}else{if(w<t){g.push("ERROR: Coverage for "+v+" ("+w+"%) does not meet "+r+" threshold ("+t+"%)")}}})}j("global",p.global,o);Object.keys(k).forEach(function(q){j("per-file ("+q+") ",p.each,k[q])});return i(g.length===0?null:g.join("\n"))})}});module.exports=CheckCoverageCommand;