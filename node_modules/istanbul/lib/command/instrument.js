var path=require("path"),mkdirp=require("mkdirp"),once=require("once"),async=require("async"),fs=require("fs"),filesFor=require("../util/file-matcher").filesFor,nopt=require("nopt"),Instrumenter=require("../instrumenter"),inputError=require("../util/input-error"),formatOption=require("../util/help-formatter").formatOption,util=require("util"),Command=require("./index"),Collector=require("../collector"),configuration=require("../config"),verbose;var READ_FILE_CHUNK_SIZE=64*1024;function BaselineCollector(a){this.instrumenter=a;this.collector=new Collector();this.instrument=a.instrument.bind(this.instrumenter);var b=a.instrumentSync;this.instrumentSync=function(){var d=Array.prototype.slice.call(arguments),c=b.apply(this.instrumenter,d),e=this.instrumenter.lastFileCoverage(),f={};f[e.path]=e;this.collector.add(f);return c};a.instrumentSync=this.instrumentSync.bind(this)}BaselineCollector.prototype={getCoverage:function(){return this.collector.getFinalCoverage()}};function processFiles(i,b,f,c,h){var e=function(k,r){var p=path.resolve(b,k),o=path.resolve(f,k),q=path.extname(p),s=h.indexOf(q)>-1,m=path.dirname(o),n,l;r=once(r);mkdirp.sync(m);if(fs.statSync(p).isDirectory()){return r(null,k)}if(s){fs.readFile(p,"utf8",function(t,u){if(t){return r(t,k)}i.instrument(u,p,function(w,v){if(w){return r(w,k)}fs.writeFile(o,v,"utf8",function(x){return r(x,k)})})})}else{n=fs.createReadStream(p,{bufferSize:READ_FILE_CHUNK_SIZE});l=fs.createWriteStream(o);n.on("error",r);l.on("error",r);n.pipe(l);n.on("end",function(){r(null,k)})}},a=async.queue(e,10),j=[],g=0,d=new Date().getTime();a.push(c,function(m,k){var l,n;if(m){j.push({file:k,error:m.message||m.toString()});l=path.resolve(b,k);n=path.resolve(f,k);fs.writeFileSync(n,fs.readFileSync(l))}if(verbose){console.log("Processed: "+k)}else{if(g%100===0){process.stdout.write(".")}}g+=1});a.drain=function(){var k=new Date().getTime();console.log("\nProcessed ["+g+"] files in "+Math.floor((k-d)/1000)+" secs");if(j.length>0){console.log("The following "+j.length+" file(s) had errors and were copied as-is");console.log(j)}}}function InstrumentCommand(){Command.call(this)}InstrumentCommand.TYPE="instrument";util.inherits(InstrumentCommand,Command);Command.mix(InstrumentCommand,{synopsis:function synopsis(){return"instruments a file or a directory tree and writes the instrumented code to the desired output location"},usage:function(){console.error("\nUsage: "+this.toolName()+" "+this.type()+" <options> <file-or-directory>\n\nOptions are:\n\n"+[formatOption("--config <path-to-config>","the configuration file to use, defaults to .istanbul.yml"),formatOption("--output <file-or-dir>","The output file or directory. This is required when the input is a directory, defaults to standard output when input is a file"),formatOption("-x <exclude-pattern> [-x <exclude-pattern>]",'one or more fileset patterns (e.g. "**/vendor/**" to ignore all files under a vendor directory). Also see the --default-excludes option'),formatOption("--variable <global-coverage-variable-name>","change the variable name of the global coverage variable from the default value of `__coverage__` to something else"),formatOption("--embed-source","embed source code into the coverage object, defaults to false"),formatOption("--[no-]compact","produce [non]compact output, defaults to compact"),formatOption("--[no-]preserve-comments","remove / preserve comments in the output, defaults to false"),formatOption("--[no-]complete-copy","also copy non-javascript files to the ouput directory as is, defaults to false"),formatOption("--save-baseline","produce a baseline coverage.json file out of all files instrumented"),formatOption("--baseline-file <file>","filename of baseline file, defaults to coverage/coverage-baseline.json")].join("\n\n")+"\n");console.error("\n")},run:function(i,o){var m={config:path,output:path,x:[Array,String],variable:String,compact:Boolean,"complete-copy":Boolean,verbose:Boolean,"save-baseline":Boolean,"baseline-file":path,"embed-source":Boolean,"preserve-comments":Boolean},a=nopt(m,{v:"--verbose"},i,0),l={verbose:a.verbose,instrumentation:{variable:a.variable,compact:a.compact,"embed-source":a["embed-source"],"preserve-comments":a["preserve-comments"],excludes:a.x,"complete-copy":a["complete-copy"],"save-baseline":a["save-baseline"],"baseline-file":a["baseline-file"]}},c=configuration.loadFile(a.config,l),e=c.instrumentation,h=a.argv.remain,d,g,n,p,j,k=e.saveBaseline(),f=path.resolve(e.baselineFile()),b=a.output;verbose=c.verbose;if(h.length!==1){return o(inputError.create("Need exactly one filename/ dirname argument for the instrument command!"))}if(e.completeCopy()){p=["**/*"]}else{p=e.extensions().map(function(q){return"**/*"+q})}j=new Instrumenter({coverageVariable:e.variable(),embedSource:e.embedSource(),noCompact:!e.compact(),preserveComments:e.preserveComments()});if(k){mkdirp.sync(path.dirname(f));j=new BaselineCollector(j);process.on("exit",function(){util.puts("Saving baseline coverage at: "+f);fs.writeFileSync(f,JSON.stringify(j.getCoverage()),"utf8")})}d=path.resolve(h[0]);g=fs.statSync(d);if(g.isDirectory()){if(!b){return o(inputError.create("Need an output directory [-o <dir>] when input is a directory!"))}if(b===d){return o(inputError.create("Cannot instrument into the same directory/ file as input!"))}mkdirp.sync(b);filesFor({root:d,includes:p,excludes:a.x||e.excludes(false),relative:true},function(r,q){if(r){return o(r)}processFiles(j,d,b,q,e.extensions())})}else{if(b){n=fs.createWriteStream(b)}else{n=process.stdout}n.write(j.instrumentSync(fs.readFileSync(d,"utf8"),d));if(n!==process.stdout){n.end()}}}});module.exports=InstrumentCommand;