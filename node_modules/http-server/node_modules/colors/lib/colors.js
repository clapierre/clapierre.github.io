var colors={};module.exports=colors;colors.themes={};var ansiStyles=colors.styles=require("./styles");var defineProps=Object.defineProperties;colors.supportsColor=require("./system/supports-colors");if(typeof colors.enabled==="undefined"){colors.enabled=colors.supportsColor}colors.stripColors=colors.strip=function(a){return(""+a).replace(/\x1B\[\d+m/g,"")};var stylize=colors.stylize=function stylize(b,a){return ansiStyles[a].open+b+ansiStyles[a].close};var matchOperatorsRe=/[|\\{}()[\]^$+*?.]/g;var escapeStringRegexp=function(a){if(typeof a!=="string"){throw new TypeError("Expected a string")}return a.replace(matchOperatorsRe,"\\$&")};function build(b){var a=function a(){return applyStyle.apply(a,arguments)};a._styles=b;a.__proto__=proto;return a}var styles=(function(){var a={};ansiStyles.grey=ansiStyles.gray;Object.keys(ansiStyles).forEach(function(b){ansiStyles[b].closeRe=new RegExp(escapeStringRegexp(ansiStyles[b].close),"g");a[b]={get:function(){return build(this._styles.concat(b))}}});return a})();var proto=defineProps(function colors(){},styles);function applyStyle(){var d=arguments;var c=d.length;var h=c!==0&&String(arguments[0]);if(c>1){for(var b=1;b<c;b++){h+=" "+d[b]}}if(!colors.enabled||!h){return h}var g=this._styles;var e=g.length;while(e--){var f=ansiStyles[g[e]];h=f.open+h.replace(f.closeRe,f.open)+f.close}return h}function applyTheme(b){for(var a in b){(function(c){colors[c]=function(d){return colors[b[c]](d)}})(a)}}colors.setTheme=function(b){if(typeof b==="string"){try{colors.themes[b]=require(b);applyTheme(colors.themes[b]);return colors.themes[b]}catch(a){console.log(a);return a}}else{applyTheme(b)}};function init(){var a={};Object.keys(styles).forEach(function(b){a[b]={get:function(){return build([b])}}});return a}var sequencer=function sequencer(b,c){var d=c.split(""),a=0;d=d.map(b);return d.join("")};colors.trap=require("./custom/trap");colors.zalgo=require("./custom/zalgo");colors.maps={};colors.maps.america=require("./maps/america");colors.maps.zebra=require("./maps/zebra");colors.maps.rainbow=require("./maps/rainbow");colors.maps.random=require("./maps/random");for(var map in colors.maps){(function(a){colors[a]=function(b){return sequencer(colors.maps[a],b)}})(map)}defineProps(colors,init());