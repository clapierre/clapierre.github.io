var assert=require("assert"),fs=require("fs"),path=require("path"),spawn=require("child_process").spawn,request=require("request"),vows=require("vows"),macros=require("./helpers/macros"),examplesDir=path.join(__dirname,"..","examples","simple"),simpleScript=path.join(examplesDir,"simple.js"),pkg=JSON.parse(fs.readFileSync(path.join(__dirname,"..","package.json"),"utf8")),fooURI="http://localhost:9090/foo",server;vows.describe("union/simple").addBatch({"When using union":{"a simple http server":{topic:function(){server=spawn(process.argv[0],[simpleScript]),server.stdout.on("data",this.callback.bind(this,null))},"a GET request to `/foo`":{topic:function(){request({uri:fooURI},this.callback)},"it should respond with `hello world`":function(e,t,s){macros.assertValidResponse(e,t),assert.equal(s,"hello world\n")},"it should respond with 'x-powered-by': 'union <version>'":function(e,t){assert.isNull(e),assert.equal(t.headers["x-powered-by"],"union "+pkg.version)}},"a POST request to `/foo`":{topic:function(){request.post({uri:fooURI},this.callback)},"it should respond with `wrote to a stream!`":function(e,t,s){macros.assertValidResponse(e,t),assert.equal(s,"wrote to a stream!")}},"a GET request to `/redirect`":{topic:function(){request.get({url:"http://localhost:9090/redirect",followRedirect:!1},this.callback)},"it should redirect to `http://www.google.com`":function(e,t){assert.equal(t.statusCode,302),assert.equal(t.headers.location,"http://www.google.com")}},"a GET request to `/custom_redirect`":{topic:function(){request.get({url:"http://localhost:9090/custom_redirect",followRedirect:!1},this.callback)},"it should redirect to `/foo`":function(e,t){assert.equal(t.statusCode,301),assert.equal(t.headers.location,"http://localhost:9090/foo")}},"a GET request to `/async`":{topic:function(){request.get({url:"http://localhost:9090/async",timeout:500},this.callback)},"it should not timeout":function(e,t){assert.ifError(e),assert.equal(t.statusCode,200)}}}}}).addBatch({"When the tests are over":{"the server should close":function(){server.kill()}}})["export"](module);