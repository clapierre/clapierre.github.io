function createServers(e){var t=0;async.whilst(function(){return 5>t},function(e){var r=net.createServer(function(){}),s=0===t?"test.sock":"test"+t+".sock";r.listen(path.join(socketDir,s),e),t++,servers.push(r)},e)}var assert=require("assert"),exec=require("child_process").exec,net=require("net"),path=require("path"),async=require("async"),vows=require("vows"),portfinder=require("../lib/portfinder"),servers=[],socketDir=path.join(__dirname,"fixtures"),badDir=path.join(__dirname,"bad-dir");vows.describe("portfinder").addBatch({"When using portfinder module":{"with 5 existing servers":{topic:function(){createServers(this.callback)},"the getPort() method":{topic:function(){portfinder.getSocket({path:path.join(socketDir,"test.sock")},this.callback)},"should respond with the first free socket (test5.sock)":function(e,t){assert.isTrue(!e),assert.equal(t,path.join(socketDir,"test5.sock"))}}}}}).addBatch({"When using portfinder module":{"with no existing servers":{"the getSocket() method":{"with a directory that doesnt exist":{topic:function(){var e=this;exec("rm -rf "+badDir,function(){portfinder.getSocket({path:path.join(badDir,"test.sock")},e.callback)})},"should respond with the first free socket (test.sock)":function(e,t){assert.isTrue(!e),assert.equal(t,path.join(badDir,"test.sock"))}},"with a directory that exists":{topic:function(){portfinder.getSocket({path:path.join(socketDir,"exists.sock")},this.callback)},"should respond with the first free socket (exists.sock)":function(e,t){assert.isTrue(!e),assert.equal(t,path.join(socketDir,"exists.sock"))}}}}}}).addBatch({"When the tests are over":{"necessary cleanup should take place":function(){exec("rm -rf "+badDir+" "+path.join(socketDir,"*"),function(){})}}})["export"](module);