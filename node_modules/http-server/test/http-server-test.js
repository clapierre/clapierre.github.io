var assert=require("assert"),path=require("path"),fs=require("fs"),vows=require("vows"),request=require("request"),httpServer=require("../lib/http-server"),root=path.join(__dirname,"fixtures","root");vows.describe("http-server").addBatch({"When http-server is listening on 8080":{topic:function(){var t=httpServer.createServer({root:root,robots:!0,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":"true"}});t.listen(8080),this.callback(null,t)},"it should serve files from root directory":{topic:function(){request("http://127.0.0.1:8080/file",this.callback)},"status code should be 200":function(t){assert.equal(t.statusCode,200)},"and file content":{topic:function(t,e){var o=this;fs.readFile(path.join(root,"file"),"utf8",function(t,s){o.callback(t,s,e)})},"should match content of served file":function(t,e,o){assert.equal(o.trim(),e.trim())}}},"when requesting non-existent file":{topic:function(){request("http://127.0.0.1:8080/404",this.callback)},"status code should be 404":function(t){assert.equal(t.statusCode,404)}},"when requesting /":{topic:function(){request("http://127.0.0.1:8080/",this.callback)},"should respond with index":function(t,e,o){assert.equal(e.statusCode,200),assert.include(o,"/file"),assert.include(o,"/canYouSeeMe")}},"when robots options is activated":{topic:function(){request("http://127.0.0.1:8080/",this.callback)},"should respond with status code 200 to /robots.txt":function(t){assert.equal(t.statusCode,200)}},"and options include custom set http-headers":{topic:function(){request("http://127.0.0.1:8080/",this.callback)},"should respond with headers set in options":function(t,e){assert.equal(e.headers["access-control-allow-origin"],"*"),assert.equal(e.headers["access-control-allow-credentials"],"true")}},"When http-server is proxying from 8081 to 8080":{topic:function(){var t=httpServer.createServer({proxy:"http://127.0.0.1:8080/",root:path.join(__dirname,"fixtures")});t.listen(8081),this.callback(null,t)},"it should serve files from the proxy server root directory":{topic:function(){request("http://127.0.0.1:8081/root/file",this.callback)},"status code should be the enpoint code 200":function(t){assert.equal(t.statusCode,200)},"and file content":{topic:function(t,e){var o=this;fs.readFile(path.join(root,"file"),"utf8",function(t,s){o.callback(t,s,e)})},"should match content of the served file":function(t,e,o){assert.equal(o.trim(),e.trim())}}},"it should fallback to the proxied server":{topic:function(){request("http://127.0.0.1:8081/file",this.callback)},"status code should be the enpoint code 200":function(t){assert.equal(t.statusCode,200)},"and file content":{topic:function(t,e){var o=this;fs.readFile(path.join(root,"file"),"utf8",function(t,s){o.callback(t,s,e)})},"should match content of the proxied served file":function(t,e,o){assert.equal(o.trim(),e.trim())}}}}},"When cors is enabled":{topic:function(){var t=httpServer.createServer({root:root,cors:!0});t.listen(8082),this.callback(null,t)},"and given OPTIONS request":{topic:function(){request({method:"OPTIONS",uri:"http://127.0.0.1:8082/",headers:{"Access-Control-Request-Method":"GET",Origin:"http://example.com","Access-Control-Request-Headers":"Foobar"}},this.callback)},"status code should be 204":function(t,e){assert.equal(e.statusCode,204)}}}})["export"](module);