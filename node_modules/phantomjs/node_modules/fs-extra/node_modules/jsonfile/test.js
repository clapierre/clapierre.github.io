var assert=require("assert"),fs=require("fs"),os=require("os"),path=require("path"),rimraf=require("rimraf"),jf=require("./");describe("jsonfile",function(){var e;beforeEach(function(n){e=path.join(os.tmpdir(),"jsonfile-tests"),rimraf(e,function(){fs.mkdir(e,n)})}),afterEach(function(n){rimraf(e,n)}),describe("+ readFile()",function(){it("should read and parse JSON",function(n){var i=path.join(e,"somefile.json"),r={name:"JP"};fs.writeFileSync(i,JSON.stringify(r)),jf.readFile(i,function(e,i){assert.ifError(e),assert.equal(i.name,r.name),n()})}),describe("> when JSON reviver is set",function(){it("should transform the JSON",function(n){var i=path.join(e,"somefile.json"),r=function(e,n){return"string"!=typeof n?n:n.indexOf("date:")<0?n:new Date(n.split("date:")[1])},t={name:"jp",day:"date:2015-06-19T11:41:26.815Z"};fs.writeFileSync(i,JSON.stringify(t)),jf.readFile(i,{reviver:r},function(e,i){assert.ifError(e),assert.strictEqual(i.name,"jp"),assert(i.day instanceof Date),assert.strictEqual(i.day.toISOString(),"2015-06-19T11:41:26.815Z"),n()})})}),describe("> when passing null and callback",function(){it("should not throw an error",function(n){var i=path.join(e,"somefile.json"),r={name:"jp"};fs.writeFileSync(i,JSON.stringify(r)),jf.readFile(i,null,function(e){assert.ifError(e),assert.strictEqual(r.name,"jp"),n()})})}),describe("> when passing encoding string as option",function(){it("should not throw an error",function(n){var i=path.join(e,"somefile.json"),r={name:"jp"};fs.writeFileSync(i,JSON.stringify(r)),jf.readFile(i,"utf8",function(e){assert.ifError(e),assert.strictEqual(r.name,"jp"),n()})})})}),describe("+ readFileSync()",function(){it("should read and parse JSON",function(){var n=path.join(e,"somefile3.json"),i={name:"JP"};fs.writeFileSync(n,JSON.stringify(i));try{var r=jf.readFileSync(n);assert.equal(r.name,i.name)}catch(t){assert(t)}}),describe("> when invalid JSON and throws set to false",function(){it("should return null",function(){var n=path.join(e,"somefile4-invalid.json"),i="{not valid JSON";fs.writeFileSync(n,i),assert["throws"](function(){jf.readFileSync(n)});var r=jf.readFileSync(n,{"throws":!1});assert.strictEqual(r,null)})}),describe("> when JSON reviver is set",function(){it("should transform the JSON",function(){var n=path.join(e,"somefile.json"),i=function(e,n){return"string"!=typeof n?n:n.indexOf("date:")<0?n:new Date(n.split("date:")[1])},r={name:"jp",day:"date:2015-06-19T11:41:26.815Z"};fs.writeFileSync(n,JSON.stringify(r));var t=jf.readFileSync(n,{reviver:i});assert.strictEqual(t.name,"jp"),assert(t.day instanceof Date),assert.strictEqual(t.day.toISOString(),"2015-06-19T11:41:26.815Z")})}),describe("> when passing encoding string as option",function(){it("should not throw an error",function(){var n=path.join(e,"somefile.json"),i={name:"jp"};fs.writeFileSync(n,JSON.stringify(i));try{var r=jf.readFileSync(n,"utf8")}catch(t){assert.ifError(t)}assert.strictEqual(r.name,"jp")})})}),describe("+ writeFile()",function(){it("should serialize and write JSON",function(n){var i=path.join(e,"somefile2.json"),r={name:"JP"};jf.writeFile(i,r,function(e){assert.ifError(e),fs.readFile(i,"utf8",function(e,i){assert.ifError(e);var t=JSON.parse(i);assert.equal(t.name,r.name),assert.equal(i[i.length-1],"\n"),n()})})}),describe("> when global spaces is set",function(){it("should write JSON with spacing",function(n){var i=path.join(e,"somefile.json"),r={name:"JP"};jf.spaces=2,jf.writeFile(i,r,function(e){assert.ifError(e);var r=fs.readFileSync(i,"utf8");assert.equal(r,'{\n  "name": "JP"\n}\n'),jf.spaces=null,n()})})}),describe("> when JSON replacer is set",function(){it("should replace JSON",function(n){var i=path.join(e,"somefile.json"),r=function(e,n){return n instanceof RegExp?"regex:"+n.toString():n},t={name:"jp",reg:new RegExp(/hello/g)};jf.writeFile(i,t,{replacer:r},function(e){assert.ifError(e);var r=JSON.parse(fs.readFileSync(i));assert.strictEqual(r.name,"jp"),assert.strictEqual(typeof r.reg,"string"),assert.strictEqual(r.reg,"regex:/hello/g"),n()})})}),describe("> when passing null and callback",function(){it("should not throw an error",function(n){var i=path.join(e,"somefile.json"),r={name:"jp"};jf.writeFile(i,r,null,function(e){assert.ifError(e),n()})})}),describe("> when spaces passed as an option",function(){it("should write file with spaces",function(n){var i=path.join(e,"somefile.json"),r={name:"jp"};jf.writeFile(i,r,{spaces:8},function(e){assert.ifError(e);var t=fs.readFileSync(i,"utf8");assert.strictEqual(t,JSON.stringify(r,null,8)+"\n"),n()})})}),describe("> when passing encoding string as options",function(){it("should not error",function(n){var i=path.join(e,"somefile.json"),r={name:"jp"};jf.writeFile(i,r,"utf8",function(e){assert.ifError(e);var t=fs.readFileSync(i,"utf8");assert.strictEqual(t,JSON.stringify(r)+"\n"),n()})})})}),describe("+ writeFileSync()",function(){it("should serialize the JSON and write it to file",function(){var n=path.join(e,"somefile4.json"),i={name:"JP"};jf.writeFileSync(n,i);var r=fs.readFileSync(n,"utf8"),t=JSON.parse(r);assert.equal(t.name,i.name),assert.equal(r[r.length-1],"\n"),assert.equal(r,'{"name":"JP"}\n')}),describe("> when global spaces is set",function(){it("should write JSON with spacing",function(){var n=path.join(e,"somefile.json"),i={name:"JP"};jf.spaces=2,jf.writeFileSync(n,i);var r=fs.readFileSync(n,"utf8");assert.equal(r,'{\n  "name": "JP"\n}\n'),jf.spaces=null})}),describe("> when JSON replacer is set",function(){it("should replace JSON",function(){var n=path.join(e,"somefile.json"),i=function(e,n){return n instanceof RegExp?"regex:"+n.toString():n},r={name:"jp",reg:new RegExp(/hello/g)};jf.writeFileSync(n,r,{replacer:i});var t=JSON.parse(fs.readFileSync(n));assert.strictEqual(t.name,"jp"),assert.strictEqual(typeof t.reg,"string"),assert.strictEqual(t.reg,"regex:/hello/g")})}),describe("> when spaces passed as an option",function(){it("should write file with spaces",function(){var n=path.join(e,"somefile.json"),i={name:"JP"};jf.writeFileSync(n,i,{spaces:8});var r=fs.readFileSync(n,"utf8");assert.strictEqual(r,JSON.stringify(i,null,8)+"\n")})}),describe("> when passing encoding string as options",function(){it("should not error",function(){var n=path.join(e,"somefile6.json"),i={name:"jp"};jf.writeFileSync(n,i,"utf8");var r=fs.readFileSync(n,"utf8");assert.strictEqual(r,JSON.stringify(i)+"\n")})})}),describe("spaces",function(){it("should default to null",function(){assert.strictEqual(jf.spaces,null)})})});