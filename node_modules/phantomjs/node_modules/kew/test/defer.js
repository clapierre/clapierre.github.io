var Q=require("../kew");exports.testDeferredResolve=function(c){var b="ok";var a=Q.defer();a.promise.then(function(d){c.equal(d,b,"Promise successfully returned");c.done()});setTimeout(function(){a.resolve(b)},50)};exports.testDeferredResolveOnce=function(c){var b=Q.defer();try{b.resolve(true);b.resolve(true);c.fail("Unable to resolve the same deferred twice")}catch(a){}c.done()};exports.testDeferredReject=function(c){var a=new Error("hello");var b=Q.defer();b.promise.fail(function(d){c.equal(d,a,"Promise successfully failed");c.done()});setTimeout(function(){b.reject(a)},50)};exports.testDeferredRejectOnce=function(c){var b=Q.defer();try{b.reject(new Error("nope 1"));b.reject(new Error("nope 2"));c.fail("Unable to reject the same deferred twice")}catch(a){}c.done()};exports.testDeferAndRejectFail=function(c){var b;try{b=Q.defer();b.reject(new Error("nope 1"));b.resolve(true);c.fail("Unable to reject and resolve the same deferred")}catch(a){c.ok(true,"Unable to reject and resolve same deferred")}try{b=Q.defer();b.resolve(true);b.reject(new Error("nope 1"));c.fail("Unable to reject and resolve the same deferred")}catch(a){c.ok(true,"Unable to reject and resolve same deferred")}c.done()};exports.testDeferredResolverSuccess=function(d){var b="ok";var a=Q.defer();var c=a.makeNodeResolver();a.promise.then(function(e){d.equal(e,b,"Promise successfully returned");d.done()});setTimeout(function(){c(null,b)},50)};exports.testDeferredResolverSuccess=function(d){var a=new Error("hello");var b=Q.defer();var c=b.makeNodeResolver();b.promise.fail(function(f){d.equal(f,a,"Promise successfully failed");d.done()});setTimeout(function(){c(a)},50)};