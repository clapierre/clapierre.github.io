var Q=require("../kew");var originalQ=require("q");exports.testSynchronousThenAndFin=function(g){var f=["a","b"];var b=0;var e=Q.resolve(f[0]);var d=e.fin(function(){b++});var c=d.then(function(h){if(h===f[0]){return f[1]}});var a=c.fin(function(){b++});Q.all([d,a]).then(function(h){g.equal(b,2,"fin() should have been called twice");g.equal(h[0],f[0],"first fin() should return the first val");g.equal(h[1],f[1],"second fin() should return the second val");g.done()})};exports.testSynchronousFailAndFin=function(g){var d=[];d.push(new Error("nope 1"));d.push(new Error("nope 2"));var b=0;var f=Q.reject(d[0]);var e=f.fin(function(){b++});var c=e.fail(function(h){if(h===d[0]){throw d[1]}});var a=c.fin(function(){b++});Q.all([e.fail(function(h){return h===d[0]}),a.fail(function(h){return h===d[1]})]).then(function(h){g.equal(b,2,"fin() should have been called twice");g.equal(h[0]&&h[1],true,"all promises should return true");g.done()})};exports.testAsynchronousThenAndFin=function(h){var f=["a","b"];var b=0;var g=Q.defer();setTimeout(function(){g.resolve(f[0])});var e=g.promise;var d=e.fin(function(){b++});var c=d.then(function(i){if(i!==f[0]){return}var j=Q.defer();setTimeout(function(){j.resolve(f[1])});return j.promise});var a=c.fin(function(){b++});Q.all([d,a]).then(function(i){h.equal(b,2,"fin() should have been called twice");h.equal(i[0],f[0],"first fin() should return the first val");h.equal(i[1],f[1],"second fin() should return the second val");h.done()})};exports.testAsynchronousFailAndFin=function(h){var d=[];d.push(new Error("nope 1"));d.push(new Error("nope 2"));var b=0;var g=Q.defer();setTimeout(function(){g.reject(d[0])},10);var f=g.promise;var e=f.fin(function(){b++});var c=e.fail(function(i){if(i!==d[0]){return}var j=Q.defer();setTimeout(function(){j.reject(d[1])},10);return j.promise});var a=c.fin(function(){b++});Q.all([e.fail(function(i){return i===d[0]}),a.fail(function(i){return i===d[1]})]).then(function(i){h.equal(b,2,"fin() should have been called twice");h.equal(i[0]&&i[1],true,"all promises should return true");h.done()})};exports.testChainedThens=function(e){var d=Q.resolve("a");var c=d.then(function(f){return f+"b"});var b=c.then(function(f){return f+"c"});var a=c.then(function(f){return f+"c"});Q.all([d,c,b,a]).then(function(f){e.equal(f[0],"a");e.equal(f[1],"ab");e.equal(f[2],"abc");e.equal(f[3],"abc");e.done()})};exports.testChainedFails=function(f){var c=[];c.push(new Error("first err"));c.push(new Error("second err"));c.push(new Error("third err"));var e=Q.reject(c[0]);var d=e.fail(function(g){if(g===c[0]){throw c[1]}});var b=d.fail(function(g){if(g===c[1]){throw c[2]}});var a=d.fail(function(g){if(g===c[1]){throw c[2]}});Q.all([e.fail(function(g){return g===c[0]}),d.fail(function(g){return g===c[1]}),b.fail(function(g){return g===c[2]}),a.fail(function(g){return g===c[2]})]).then(function(g){f.equal(g[0]&&g[1]&&g[2]&&g[3],true);f.done()})};exports.testEndNoCallbacks=function(a){Q.resolve(true).end();a.ok("Ended successfully");a.done()};exports.testEndNoCallbacksThrows=function(c){var a=new Error("Testing");try{Q.reject(a).end();c.fail("Should throw an error")}catch(b){c.equal(b,a,"Should throw the correct error")}c.done()};exports.testChainedPromises=function(e){var b=new Error("nope");var d="ok";var a=Q.reject(b);var c=Q.resolve(d);Q.resolve("start").then(function(){return a}).fail(function(f){if(f===b){return c}else{throw f}}).then(function(f){e.equal(f,d,"val should be returned");e.done()})};exports.testChainedEndUncaught=function(f){var b=[];b.push(new Error("nope 1"));b.push(new Error("nope 2"));b.push(new Error("nope 3"));process.on("uncaughtException",function(g){f.equal(g,b.shift(),"Error should be uncaught");if(b.length===0){f.done()}});var e=Q.defer();e.promise.end();var d=e.promise;var c=d.fail(function(g){if(g===b[0]){throw b[1]}});var a=c.fail(function(g){if(g===b[1]){throw b[2]}});d.end();c.end();a.end();setTimeout(function(){e.reject(b[0])},10)};exports.testChainedCaught=function(c){var a=new Error("nope");try{Q.reject(a).end()}catch(b){c.equal(b,a,"Error should be caught");c.done()}};exports.testChainedMixed=function(f){var i=[];i.push(new Error("nope 1"));i.push(new Error("nope 2"));i.push(new Error("nope 3"));var h=[3,2,1];var g=Q.reject(i[0]);var e=g.fail(function(j){if(j===i[0]){return h[0]}});var d=e.then(function(j){if(j===h[0]){throw i[1]}});var c=d.fail(function(j){if(j===i[1]){return h[1]}});var b=c.then(function(j){if(j===h[1]){throw i[2]}});var a=b.fail(function(j){if(j===i[2]){return h[2]}});Q.all([g.fail(function(j){return j===i[0]}),e.then(function(j){return j===h[0]}),d.fail(function(j){return j===i[1]}),c.then(function(j){return j===h[1]}),b.fail(function(j){return j===i[2]}),a.then(function(j){return j===h[2]})]).then(function(j){f.equal(j[0]&&j[1]&&j[2]&&j[3]&&j[4]&&j[5],true,"All values should return true");f.done()})};exports.testInteroperabilityWithOtherPromises=function(d){var b=Q.defer();b.then(function(e){return originalQ(1+e)}).then(function(e){d.equal(e,11)});var a=Q.defer(),c=new Error("error");a.then(function(){return originalQ.reject(c)}).fail(function(e){d.equal(e,c)});b.resolve(10);a.resolve();Q.all([b,a]).then(function(){d.done()})};exports.testAllSettled=function(c){var b=Q.resolve("woot");var a=Q.reject(new Error("oops"));Q.allSettled([b,a,"just a string"]).then(function(d){c.equals("fulfilled",d[0].state);c.equals("woot",d[0].value);c.equals("rejected",d[1].state);c.equals("oops",d[1].reason.message);c.equals("fulfilled",d[2].state);c.equals("just a string",d[2].value)});Q.allSettled([]).then(function(d){c.equals(0,d.length);c.done()})};exports.testTimeout=function(b){var a=Q.delay(50).timeout(45,"Timeout message");a.then(function(){b.fail("The promise is supposed to be timeout")}).fail(function(c){b.equals("Timeout message",c.message,"The error message should be the one passed into timeout()")}).fin(b.done)};exports.testNotTimeout=function(b){var a=Q.delay("expected data",40).timeout(45,"Timeout message");a.then(function(c){b.equals("expected data",c,"The data should be the data from the original promise")}).fail(function(c){b.fail("The promise is supposed to be resolved before the timeout")}).fin(b.done)};exports.testNotTimeoutButReject=function(b){var a=Q.delay(40).then(function(){throw new Error("Reject message")}).timeout(45,"Timeout message");a.then(function(c){b.fail("The promise is supposed to be rejected")}).fail(function(c){b.equals("Reject message",c.message,"The error message should be from the original promise")}).fin(b.done)};exports.testDelay=function(b){var a=false;setTimeout(function(){a=true},10);Q.resolve("expected").delay(20).then(function(c){b.equal("expected",c);b.ok(a);b.done()})};