var Q=require("../kew");exports.testContextWithDelay=function(a){Q.resolve(true).setContext({id:1}).then(function(c,b){a.equal(b.id,1,"Should return the first context");return Q.delay(500)}).setContext({id:2}).then(function(c,b){a.equal(b.id,2,"Should return the second context");return Q.delay(500)}).clearContext().then(function(c,b){a.equal(typeof b,"undefined","Should return an undefined context");return Q.delay(500)}).setContext({id:3}).fin(a.done)};exports.testGeneralContextFlow=function(a){Q.resolve(true).then(function(c,b){a.equal(typeof b,"undefined","Context should be undefined");throw new Error()}).fail(function(c,b){a.equal(typeof b,"undefined","Context should be undefined")}).setContext({counter:1}).then(function(c,b){a.equal(b.counter,1,"Counter should be 1");b.counter++}).then(function(c,b){a.equal(b.counter,2,"Counter should be 2");b.counter++;throw new Error()}).fail(function(c,b){a.equal(b.counter,3,"Counter should be 3")}).then(function(c,b){return Q.resolve(false).setContext({counter:0})}).then(function(c,b){a.equal(b.counter,0,"Counter should be 0");throw new Error()}).fail(function(c,b){a.equal(b.counter,0,"Counter should be 0")}).then(function(c,b){return Q.resolve(false).clearContext()}).then(function(c,b){a.equal(b.counter,0,"Counter should be 0");throw new Error()}).fail(function(c,b){a.equal(b.counter,0,"Counter should be 0")}).clearContext().then(function(c,b){a.equal(typeof b,"undefined","Context should be undefined");throw new Error()}).fail(function(c,b){a.equal(typeof b,"undefined","Context should be undefined")}).fin(a.done)};