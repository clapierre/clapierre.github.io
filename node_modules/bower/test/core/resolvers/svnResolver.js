var expect=require("expect.js");var util=require("util");var path=require("path");var fs=require("graceful-fs");var rimraf=require("rimraf");var mkdirp=require("mkdirp");var Q=require("q");var mout=require("mout");var Logger=require("bower-logger");var SvnResolver=require("../../../lib/core/resolvers/SvnResolver");var defaultConfig=require("../../../lib/config");describe("SvnResolver",function(){var g=path.resolve(__dirname,"../../tmp/tmp");var e=path.resolve(__dirname,"../../assets/package-svn/repo");var a=path.resolve(__dirname,"../../assets/package-svn/admin");var f=SvnResolver.tags;var c;before(function(){c=new Logger()});afterEach(function(){c.removeAllListeners()});function b(){SvnResolver.tags=f;SvnResolver.clearRuntimeCache()}function d(h){if(typeof h==="string"){h={source:h}}return new SvnResolver(h,defaultConfig(),c)}describe("misc",function(){it.skip("should error out if svn is not installed");it.skip("should setup svn template dir to an empty folder")});describe(".hasNew",function(){before(function(){mkdirp.sync(g)});afterEach(function(h){b();rimraf(path.join(g,".bower.json"),h)});after(function(h){rimraf(g,h)});it("should be true when the resolution type is different",function(h){var i;fs.writeFileSync(path.join(g,".bower.json"),JSON.stringify({name:"foo",version:"0.0.0",_resolution:{type:"version",tag:"0.0.0",commit:123}}));SvnResolver.tags=function(){return Q.resolve({boo:123})};SvnResolver.branches=function(){return Q.resolve({trunk:"*"})};i=d("foo");i.hasNew(g).then(function(j){expect(j).to.be(true);h()}).done()});it("should be true when a higher version for a range is available",function(h){var i;fs.writeFileSync(path.join(g,".bower.json"),JSON.stringify({name:"foo",version:"1.0.0",_resolution:{type:"version",tag:"1.0.0",commit:3}}));SvnResolver.tags=function(){return Q.resolve({"1.0.0":2,"1.0.1":2})};i=d("foo");i.hasNew(g).then(function(j){expect(j).to.be(true);h()}).done()});it("should be true when a resolved to a lower version of a range",function(h){var i;fs.writeFileSync(path.join(g,".bower.json"),JSON.stringify({name:"foo",version:"1.0.1",_resolution:{type:"version",tag:"1.0.1",commit:3}}));SvnResolver.tags=function(){return Q.resolve({"1.0.0":2})};i=d("foo");i.hasNew(g).then(function(j){expect(j).to.be(true);h()}).done()});it("should be false when resolved to the same tag (with same commit hash) for a given range",function(h){var i;fs.writeFileSync(path.join(g,".bower.json"),JSON.stringify({name:"foo",version:"1.0.1",_resolution:{type:"version",tag:"1.0.1",commit:2}}));SvnResolver.tags=function(){return Q.resolve({"1.0.0":1,"1.0.1":2})};i=d("foo");i.hasNew(g).then(function(j){expect(j).to.be(false);h()}).done()});it("should be true when resolved to the same tag (with different commit hash) for a given range",function(h){var i;fs.writeFileSync(path.join(g,".bower.json"),JSON.stringify({name:"foo",version:"1.0.1",_resolution:{type:"version",tag:"1.0.1",commit:3}}));SvnResolver.tags=function(){return Q.resolve({"1.0.0":2,"1.0.1":4})};i=d("foo");i.hasNew(g).then(function(j){expect(j).to.be(true);h()}).done()});it("should be false when targeting commit hashes",function(h){var i;fs.writeFileSync(path.join(g,".bower.json"),JSON.stringify({name:"foo",_resolution:{type:"commit",commit:1}}));SvnResolver.tags=function(){return Q.resolve({"1.0.0":2})};i=d("foo");i.hasNew(g).then(function(j){expect(j).to.be(true);h()}).done()})});describe("._resolve",function(){afterEach(b);it("should call the necessary functions by the correct order",function(h){var i;function j(){SvnResolver.apply(this,arguments);this._stack=[]}util.inherits(j,SvnResolver);mout.object.mixIn(j,SvnResolver);j.prototype.getStack=function(){return this._stack};j.tags=function(){return Q.resolve({"1.0.0":1})};j.prototype.resolve=function(){this._stack=[];return SvnResolver.prototype.resolve.apply(this,arguments)};j.prototype._findResolution=function(){this._stack.push("before _findResolution");return SvnResolver.prototype._findResolution.apply(this,arguments).then(function(k){this._stack.push("after _findResolution");return k}.bind(this))};j.prototype._export=function(){this._stack.push("before _export");return Q.resolve().then(function(k){this._stack.push("after _export");return k}.bind(this))};i=new j({source:"foo",target:"1.0.0"},defaultConfig(),c);i.resolve().then(function(){expect(i.getStack()).to.eql(["before _findResolution","after _findResolution","before _export","after _export"]);h()}).done()})});describe("._findResolution",function(){afterEach(b);it("should resolve to an object",function(h){var i;SvnResolver.tags=function(){return Q.resolve({})};i=d("foo");i._findResolution("*").then(function(j){expect(j).to.be.an("object");h()}).done()});it('should resolve "*" to the trunk if a repository has no valid semver tags',function(h){var i;SvnResolver.tags=function(){return Q.resolve({"some-tag":1})};i=d("foo");i._findResolution("*").then(function(j){expect(j).to.eql({type:"branch",branch:"trunk",commit:"*"});h()}).done()});it('should resolve "*" to the latest version if a repository has valid semver tags, ignoring pre-releases',function(h){var i;SvnResolver.tags=function(){return Q.resolve({"0.1.0":1,"v0.1.1":2,"0.2.0-rc.1":3})};i=d("foo");i._findResolution("*").then(function(j){expect(j).to.eql({type:"version",tag:"v0.1.1",commit:2});h()}).done()});it('should resolve "*" to the latest version if a repository has valid semver tags, not ignoring pre-releases if they are the only versions',function(h){var i;SvnResolver.tags=function(){return Q.resolve({"0.1.0-rc.1":1,"0.1.0-rc.2":2})};i=d("foo");i._findResolution("*").then(function(j){expect(j).to.eql({type:"version",tag:"0.1.0-rc.2",commit:2});h()}).done()});it("should resolve to the latest version that matches a range/version",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"0.1.0":1,"v0.1.1":2,"0.2.0":3,"v0.2.1":4})};i=d("foo");i._findResolution("~0.2.0").then(function(j){expect(j).to.eql({type:"version",tag:"v0.2.1",commit:4});h()}).done()});it("should resolve to a tag even if target is a range that does not exist",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"1.0":1})};i=d("foo");i._findResolution("1.0").then(function(j){expect(j).to.eql({type:"tag",tag:"1.0",commit:1});h()}).done()});it("should resolve to the latest pre-release version that matches a range/version",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"0.1.0":1,"v0.1.1":2,"0.2.0":3,"v0.2.1-rc.1":4})};i=d("foo");i._findResolution("~0.2.1").then(function(j){expect(j).to.eql({type:"version",tag:"v0.2.1-rc.1",commit:4});h()}).done()});it("should resolve to the exact version if exists",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"0.8.1":1,"0.8.1+build.1":2,"0.8.1+build.2":3,"0.8.1+build.3":4})};i=d("foo");i._findResolution("0.8.1+build.2").then(function(j){expect(j).to.eql({type:"version",tag:"0.8.1+build.2",commit:3});h()}).done()});it("should fail to resolve if none of the versions matched a range/version",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"0.1.0":1,"v0.1.1":2})};i=d("foo");i._findResolution("~0.2.0").then(function(){h(new Error("Should have failed"))},function(j){expect(j).to.be.an(Error);expect(j.message).to.match(/was able to satisfy ~0.2.0/i);expect(j.details).to.match(/available versions: 0\.1\.1, 0\.1\.0/i);expect(j.code).to.equal("ENORESTARGET");h()}).done()});it("should fail to resolve if there are no versions to match a range/version",function(h){var i;SvnResolver.tags=function(){return Q.resolve({foo:1})};i=d("foo");i._findResolution("~0.2.0").then(function(){h(new Error("Should have failed"))},function(j){expect(j).to.be.an(Error);expect(j.message).to.match(/was able to satisfy ~0.2.0/i);expect(j.details).to.match(/no versions found in foo/i);expect(j.code).to.equal("ENORESTARGET");h()}).done()});it("should resolve to the specified commit",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"some-tag":1})};i=d("foo");i._findResolution("r1").then(function(j){expect(j).to.eql({type:"commit",commit:1});h()}).done()});it("should resolve to the specified tag if it exists",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"some-tag":1})};i=d("foo");i._findResolution("some-tag").then(function(j){expect(j).to.eql({type:"tag",tag:"some-tag",commit:1});h()}).done()});it("should fail to resolve to the specified tag if it doesn't exists",function(h){var i;SvnResolver.tags=function(){return Q.resolve({"some-tag":2})};i=d("foo");i._findResolution("some-branch").then(function(){h(new Error("Should have failed"))},function(j){expect(j).to.be.an(Error);expect(j.message).to.match(/target some-branch does not exist/i);expect(j.details).to.match(/available tags: some-tag/i);expect(j.code).to.equal("ENORESTARGET");h()}).done()})});describe("._savePkgMeta",function(){before(function(){mkdirp.sync(g)});afterEach(function(h){rimraf(path.join(g,".bower.json"),h)});after(function(h){rimraf(g,h)});it("should save the resolution to the .bower.json to be used later by .hasNew",function(h){var i=d("foo");i._resolution={type:"version",tag:"0.0.1"};i._tempDir=g;i._savePkgMeta({name:"foo",version:"0.0.1"}).then(function(){return Q.nfcall(fs.readFile,path.join(g,".bower.json"))}).then(function(k){var j=JSON.parse(k.toString());expect(j._resolution).to.eql(i._resolution);h()}).done()});it("should save the release in the package meta",function(h){var j=d("foo");var i=path.join(g,".bower.json");j._resolution={type:"version",tag:"0.0.1",commit:"1"};j._tempDir=g;j._savePkgMeta({name:"foo",version:"0.0.1"}).then(function(){return Q.nfcall(fs.readFile,i)}).then(function(l){var k=JSON.parse(l.toString());expect(k._release).to.equal("0.0.1")}).then(function(){j._resolution={type:"version",tag:"0.0.1+build.5",commit:"1"};return j._savePkgMeta({name:"foo"})}).then(function(){return Q.nfcall(fs.readFile,i)}).then(function(l){var k=JSON.parse(l.toString());expect(k._release).to.equal("0.0.1+build.5")}).then(function(){j._resolution={type:"tag",tag:"0.0.1",commit:"1"};return j._savePkgMeta({name:"foo"})}).then(function(){return Q.nfcall(fs.readFile,i)}).then(function(l){var k=JSON.parse(l.toString());expect(k._release).to.equal("0.0.1")}).then(function(){j._resolution={type:"branch",branch:"foo",commit:"1"};return j._savePkgMeta({name:"foo"})}).then(function(){return Q.nfcall(fs.readFile,i)}).then(function(l){var k=JSON.parse(l.toString());expect(k._release).to.equal("1")}).then(function(){j._resolution={type:"commit",commit:"1"};return j._savePkgMeta({name:"foo"})}).then(function(){return Q.nfcall(fs.readFile,i)}).then(function(l){var k=JSON.parse(l.toString());expect(k._release).to.equal("1");h()}).done()});it("should add the version to the package meta if not present and resolution is a version",function(h){var i=d("foo");i._resolution={type:"version",tag:"v0.0.1"};i._tempDir=g;i._savePkgMeta({name:"foo"}).then(function(){return Q.nfcall(fs.readFile,path.join(g,".bower.json"))}).then(function(k){var j=JSON.parse(k.toString());expect(j.version).to.equal("0.0.1");h()}).done()});it("should remove the version from the package meta if resolution is not a version",function(h){var i=d("foo");i._resolution={type:"commit",commit:"1"};i._tempDir=g;i._savePkgMeta({name:"foo",version:"0.0.1"}).then(function(){return Q.nfcall(fs.readFile,path.join(g,".bower.json"))}).then(function(k){var j=JSON.parse(k.toString());expect(j).to.not.have.property("version");h()}).done()});it("should warn if the resolution version is different than the package meta version",function(h){var j=d("foo");var i=false;j._resolution={type:"version",tag:"0.0.1"};j._tempDir=g;c.on("log",function(k){expect(k).to.be.an("object");if(k.level==="warn"&&k.id==="mismatch"){expect(k.message).to.match(/\(0\.0\.0\).*different.*\(0\.0\.1\)/);i=true}});j._savePkgMeta({name:"foo",version:"0.0.0"}).then(function(){return Q.nfcall(fs.readFile,path.join(g,".bower.json"))}).then(function(l){var k=JSON.parse(l.toString());expect(k.version).to.equal("0.0.1");expect(i).to.be(true);h()}).done()});it("should not warn if the resolution version and the package meta version are the same",function(h){var j=d("foo");var i=false;j._resolution={type:"version",tag:"v0.0.1"};j._tempDir=g;j._savePkgMeta({name:"foo",version:"0.0.1"}).then(function(){return Q.nfcall(fs.readFile,path.join(g,".bower.json"))},null).then(function(l){var k=JSON.parse(l.toString());expect(k.version).to.equal("0.0.1");expect(i).to.be(false);h()}).done()})});describe("#clearRuntimeCache",function(){function h(){}util.inherits(h,SvnResolver);mout.object.mixIn(h,SvnResolver);it("should clear tags cache",function(){h._cache.tags.set("foo",{});h.clearRuntimeCache();expect(h._cache.tags.has("foo")).to.be(false)});it("should clear versions cache",function(){h._cache.versions.set("foo",{});h.clearRuntimeCache();expect(h._cache.versions.has("foo")).to.be(false)})});describe("#versions",function(){afterEach(b);it("should resolve to an empty array if no tags are found",function(h){SvnResolver.tags=function(){return Q.resolve({})};SvnResolver.versions("foo").then(function(i){expect(i).to.be.an("array");expect(i).to.eql([]);h()}).done()});it("should resolve to an empty array if no valid semver tags",function(h){SvnResolver.tags=function(){return Q.resolve({foo:1,bar:2,baz:3})};SvnResolver.versions("foo").then(function(i){expect(i).to.be.an("array");expect(i).to.eql([]);h()}).done()});it("should resolve to an array of versions, ignoring invalid semver tags",function(h){SvnResolver.tags=function(){return Q.resolve({"0.2.1":1,"v0.1.1":2,"0.1.0":3,invalid:4,"/":5,"":6})};SvnResolver.versions("foo",true).then(function(i){expect(i).to.eql([{version:"0.2.1",tag:"0.2.1",commit:1},{version:"0.1.1",tag:"v0.1.1",commit:2},{version:"0.1.0",tag:"0.1.0",commit:3}])}).then(function(){return SvnResolver.versions("foo")}).then(function(i){expect(i).to.eql(["0.2.1","0.1.1","0.1.0"]);h()}).done()});it("should order the versions according to the semver spec",function(h){SvnResolver.tags=function(){return Q.resolve({"0.1.0":1,"0.1.1+build.11":2,"0.1.1+build.100":3,"0.1.1-rc.22":4,"0.1.1-rc.200":5,"0.1.1":6,"v0.2.1":7})};SvnResolver.versions("foo",true).then(function(i){expect(i).to.eql([{version:"0.2.1",tag:"v0.2.1",commit:"7"},{version:"0.1.1+build.11",tag:"0.1.1+build.11",commit:"2"},{version:"0.1.1+build.100",tag:"0.1.1+build.100",commit:"3"},{version:"0.1.1",tag:"0.1.1",commit:"6"},{version:"0.1.1-rc.200",tag:"0.1.1-rc.200",commit:"5"},{version:"0.1.1-rc.22",tag:"0.1.1-rc.22",commit:"4"},{version:"0.1.0",tag:"0.1.0",commit:"1"}]);h()}).done()});it("should cache the result for each source",function(h){SvnResolver.tags=function(i){if(i==="foo"){return Q.resolve({"0.2.1":123,"0.1.0":456})}return Q.resolve({"0.3.1":7,"0.3.0":8})};SvnResolver.versions("foo").then(function(i){expect(i).to.eql(["0.2.1","0.1.0"]);return SvnResolver.versions("bar")}).then(function(i){expect(i).to.eql(["0.3.1","0.3.0"]);SvnResolver._cache.versions.get("foo").splice(1,1);SvnResolver._cache.versions.get("bar").splice(1,1);return SvnResolver.versions("foo")}).then(function(i){expect(i).to.eql(["0.2.1"]);return SvnResolver.versions("bar")}).then(function(i){expect(i).to.eql(["0.3.1"]);h()}).done()});it("should work if requested in parallel for the same source",function(h){SvnResolver.tags=function(){return Q.resolve({"0.2.1":123,"0.1.0":456})};Q.all([SvnResolver.versions("foo"),SvnResolver.versions("foo")]).spread(function(j,i){expect(j).to.eql(["0.2.1","0.1.0"]);expect(i).to.eql(j);h()}).done()})});describe("#parseSubversionListOutput",function(){var h=["  12345 username              Jan 1 12:34 ./","  12346 username              Feb 2 12:34 branch-name/","  12347 username              Mar 3 12:34 branch_name/","  12348 username              Apr 4 12:34 branch.1.2.3/","  12349 username              Jun 5 12:34 BranchName/"].join("\r\n");it("should not include the . (dot)path",function(){var i=SvnResolver.parseSubversionListOutput(h);expect(i).to.not.have.keys(".")});it("should parse path names with alphanumerics, dashes, dots and underscores",function(){var i=SvnResolver.parseSubversionListOutput(h);expect(i).to.eql({"branch-name":"12346",branch_name:"12347","branch.1.2.3":"12348",BranchName:"12349"})})});describe(".constructor",function(){it("should guess the name from the path",function(){var h;h=d("file://"+e);expect(h.getName()).to.equal("repo");h=d("svn+http://yii.googlecode.com/svn");expect(h.getName()).to.equal("svn")})});describe(".resolve",function(){it("should export correctly if resolution is a tag",function(h){var i=d({source:"file://"+a,target:"0.0.1"});i.resolve().then(function(j){expect(j).to.be.a("string");var k=fs.readdirSync(j);expect(k).to.contain("foo");expect(k).to.not.contain("bar");h()}).done()});it("should export correctly if resolution is a commit",function(h){var i=d({source:"file://"+a,target:"r1"});i.resolve().then(function(j){expect(j).to.be.a("string");var k=fs.readdirSync(j);expect(k).to.not.contain("foo");expect(k).to.not.contain("bar");expect(k).to.not.contain("baz");h()}).done()})})});