var expect=require("expect.js");var path=require("path");var fs=require("graceful-fs");var path=require("path");var rimraf=require("rimraf");var Logger=require("bower-logger");var cmd=require("../../../lib/util/cmd");var copy=require("../../../lib/util/copy");var GitFsResolver=require("../../../lib/core/resolvers/GitFsResolver");var defaultConfig=require("../../../lib/config");describe("GitFsResolver",function(){var e;var d=path.resolve(__dirname,"../../assets/package-a");var b;before(function(){b=new Logger()});afterEach(function(f){b.removeAllListeners();if(e){rimraf(e,f);e=null}else{f()}});function a(){GitFsResolver.clearRuntimeCache()}function c(f){if(typeof f==="string"){f={source:f}}return new GitFsResolver(f,defaultConfig(),b)}describe(".constructor",function(){it("should guess the name from the path",function(){var f=c(d);expect(f.getName()).to.equal("package-a")});it("should not guess the name from the path if the name was specified",function(){var f=c({source:d,name:"foo"});expect(f.getName()).to.equal("foo")});it("should make paths absolute and normalized",function(){var f;f=c(path.relative(process.cwd(),d));expect(f.getSource()).to.equal(d);f=c(d+"/something/..");expect(f.getSource()).to.equal(d)});it.skip("should use config.cwd for resolving relative paths")});describe(".resolve",function(){it("should checkout correctly if resolution is a branch",function(f){var g=c({source:d,target:"some-branch"});g.resolve().then(function(h){expect(h).to.be.a("string");var i=fs.readdirSync(h);var j;expect(i).to.contain("foo");expect(i).to.contain("baz");expect(i).to.contain("baz");j=fs.readFileSync(path.join(h,"foo")).toString();expect(j).to.equal("foo foo");f()}).done()});it("should checkout correctly if resolution is a tag",function(f){var g=c({source:d,target:"~0.0.1"});g.resolve().then(function(h){expect(h).to.be.a("string");var i=fs.readdirSync(h);expect(i).to.contain("foo");expect(i).to.contain("bar");expect(i).to.not.contain("baz");f()}).done()});it("should checkout correctly if resolution is a commit",function(f){var g=c({source:d,target:"bdf51ece75e20cf404e49286727b7e92d33e9ad0"});g.resolve().then(function(h){expect(h).to.be.a("string");var i=fs.readdirSync(h);expect(i).to.not.contain("foo");expect(i).to.not.contain("bar");expect(i).to.not.contain("baz");expect(i).to.contain(".master");f()}).done()});it("should remove any untracked files and directories",function(i){var j=c({source:d,target:"bdf51ece75e20cf404e49286727b7e92d33e9ad0"});var g=path.join(d,"new-file");var f=path.join(d,"new-dir");fs.writeFileSync(g,"foo");fs.mkdir(f);function h(k){fs.unlinkSync(g);fs.rmdirSync(f);if(k){throw k}}j.resolve().then(function(k){expect(k).to.be.a("string");var l=fs.readdirSync(k);expect(l).to.not.contain("new-file");expect(l).to.not.contain("new-dir");h();i()}).fail(h).done()});it("should leave the original repository untouched",function(f){cmd("git",["checkout","master"],{cwd:d}).then(function(){var g=c({source:d,target:"some-branch"});return g.resolve()}).then(function(){return cmd("git",["branch","--color=never"],{cwd:d}).spread(function(g){expect(g).to.contain("* master")})}).then(function(){return cmd("git",["status","--porcelain"],{cwd:d}).spread(function(g){g=g.trim();expect(g).to.equal("");f()})}).done()});it("should copy source folder permissions",function(f){var g;var h;e=path.resolve(__dirname,"../../assets/package-a-copy");h=c({source:e,target:"some-branch"});copy.copyDir(d,e).then(function(){fs.chmodSync(e,511);g=fs.statSync(e).mode}).then(h.resolve.bind(h)).then(function(i){var j=fs.statSync(i);expect(j.mode).to.equal(g);f()}).done()})});describe("#refs",function(){afterEach(a);it("should resolve to the references of the local repository",function(f){GitFsResolver.refs(d).then(function(g){g=g.slice(1,8);expect(g).to.eql(["e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch","0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1","0791865e6f4b88f69fc35167a09a6f0626627765 refs/tags/0.0.2","2af02ac6ddeaac1c2f4bead8d6287ce54269c039 refs/tags/0.1.0","6ab264f1ba5bafa80fb0198183493e4d5b20804a refs/tags/0.1.1","c91ed7facbb695510e3e1ab86bac8b5ac159f4f3 refs/tags/0.2.0","8556e55c65722a351ca5fdce4f1ebe83ec3f2365 refs/tags/0.2.1"]);f()}).done()});it("should cache the results",function(f){GitFsResolver.refs(d).then(function(){GitFsResolver._cache.refs.get(d).splice(0,1);return GitFsResolver.refs(d)}).then(function(g){g=g.slice(0,7);expect(g).to.eql(["e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch","0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1","0791865e6f4b88f69fc35167a09a6f0626627765 refs/tags/0.0.2","2af02ac6ddeaac1c2f4bead8d6287ce54269c039 refs/tags/0.1.0","6ab264f1ba5bafa80fb0198183493e4d5b20804a refs/tags/0.1.1","c91ed7facbb695510e3e1ab86bac8b5ac159f4f3 refs/tags/0.2.0","8556e55c65722a351ca5fdce4f1ebe83ec3f2365 refs/tags/0.2.1"]);f()}).done()})})});