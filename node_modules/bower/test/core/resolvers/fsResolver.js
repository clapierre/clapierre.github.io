var expect=require("expect.js");var path=require("path");var fs=require("graceful-fs");var path=require("path");var rimraf=require("rimraf");var mkdirp=require("mkdirp");var Q=require("q");var Logger=require("bower-logger");var cmd=require("../../../lib/util/cmd");var copy=require("../../../lib/util/copy");var FsResolver=require("../../../lib/core/resolvers/FsResolver");var defaultConfig=require("../../../lib/config");describe("FsResolver",function(){var d;var a;var c=path.resolve(__dirname,"../../assets/package-a");before(function(e){a=new Logger();cmd("git",["checkout","0.2.1"],{cwd:c}).then(e.bind(e,null),e)});afterEach(function(e){a.removeAllListeners();if(d){rimraf(d,e);d=null}else{e()}});function b(e){if(typeof e==="string"){e={source:e}}return new FsResolver(e,defaultConfig(),a)}describe(".constructor",function(){it("should guess the name from the path",function(){var e=b(path.resolve("../../assets/package-zip.zip"));expect(e.getName()).to.equal("package-zip")});it("should make paths absolute and normalized",function(){var e;e=b(path.relative(process.cwd(),c));expect(e.getSource()).to.equal(c);e=b(c+"/something/..");expect(e.getSource()).to.equal(c)});it.skip("should use config.cwd for resolving relative paths");it("should error out if a target was specified",function(e){var g;try{g=b({source:c,target:"0.0.1"})}catch(f){expect(f).to.be.an(Error);expect(f.message).to.match(/can\'t resolve targets/i);expect(f.code).to.equal("ENORESTARGET");return e()}e(new Error("Should have thrown"))})});describe(".hasNew",function(){it("should resolve always to true (for now..)",function(e){var f=b(c);d=path.resolve(__dirname,"../../tmp/tmp");mkdirp.sync(d);fs.writeFileSync(path.join(d,".bower.json"),JSON.stringify({name:"test"}));f.hasNew(d).then(function(g){expect(g).to.be(true);e()}).done()})});describe(".resolve",function(){function e(g,f){return Q.nfcall(fs.readFile,path.join(g,".bower.json")).then(function(h){var i=JSON.parse(h.toString());expect(i.main).to.equal(f);return i})}it("should copy the source directory contents",function(f){var g=b(c);g.resolve().then(function(h){expect(fs.existsSync(path.join(h,"foo"))).to.be(true);expect(fs.existsSync(path.join(h,"bar"))).to.be(true);expect(fs.existsSync(path.join(h,"baz"))).to.be(true);expect(fs.existsSync(path.join(h,"README.md"))).to.be(true);expect(fs.existsSync(path.join(h,"more"))).to.be(true);expect(fs.existsSync(path.join(h,"more","more-foo"))).to.be(true);f()}).done()});it("should copy the source file, renaming it to index",function(f){var g=b(path.join(c,"foo"));g.resolve().then(function(h){expect(fs.existsSync(path.join(h,"index"))).to.be(true);expect(fs.existsSync(path.join(h,"foo"))).to.be(false);expect(fs.existsSync(path.join(h,"bar"))).to.be(false)}).then(function(){var h=b(path.join(c,"README.md"));return h.resolve()}).then(function(h){expect(fs.existsSync(path.join(h,"index.md"))).to.be(true);expect(fs.existsSync(path.join(h,"README.md"))).to.be(false);return e(h,"index.md").then(f.bind(f,null))}).done()});it("should rename to index if source is a folder with just one file in it",function(f){var g;d=path.resolve(__dirname,"../../tmp/tmp");mkdirp.sync(d);g=b(d);copy.copyFile(path.join(c,"foo"),path.join(d,"foo")).then(g.resolve.bind(g)).then(function(h){expect(fs.existsSync(path.join(h,"index"))).to.be(true);expect(fs.existsSync(path.join(h,"foo"))).to.be(false);return e(h,"index").then(f.bind(f,null))}).done()});it("should not rename to index if source is a folder with just bower.json/component.json file in it",function(f){var g;d=path.resolve(__dirname,"../../tmp/tmp");mkdirp.sync(d);g=b(d);copy.copyFile(path.join(c,"bower.json"),path.join(d,"bower.json")).then(g.resolve.bind(g)).then(function(h){expect(fs.existsSync(path.join(h,"bower.json"))).to.be(true);rimraf.sync(d);mkdirp.sync(d);g=b(d)}).then(copy.copyFile.bind(copy,path.join(c,"bower.json"),path.join(d,"component.json"))).then(function(){return g.resolve()}).then(function(h){expect(fs.existsSync(path.join(h,"component.json"))).to.be(true);f()}).done()});it("should copy the source directory permissions",function(f){var g;var h;d=path.resolve(__dirname,"../../assets/package-a-copy");h=b(d);copy.copyDir(c,d).then(function(){fs.chmodSync(d,511);g=fs.statSync(d).mode}).then(h.resolve.bind(h)).then(function(i){var j=fs.statSync(i);expect(j.mode).to.equal(g);f()}).done()});it("should copy the source file permissions",function(f){var g;var h;d=path.resolve(__dirname,"../../tmp/temp-source");h=b(d);copy.copyFile(path.join(c,"foo"),d).then(function(){fs.chmodSync(d,511);g=fs.statSync(d).mode}).then(h.resolve.bind(h)).then(function(i){var j=fs.statSync(path.join(i,"index"));expect(j.mode).to.equal(g);f()}).done()});it("should not copy ignored paths (to speed up copying)",function(f){var g=b(c);g._applyPkgMeta=function(){return Q.resolve()};g.resolve().then(function(h){expect(fs.existsSync(path.join(h,"foo"))).to.be(true);expect(fs.existsSync(path.join(h,"test"))).to.be(false);f()}).done()});it("should extract if source is an archive",function(f){var g=b(path.resolve(__dirname,"../../assets/package-zip.zip"));g.resolve().then(function(h){expect(fs.existsSync(path.join(h,"foo.js"))).to.be(true);expect(fs.existsSync(path.join(h,"bar.js"))).to.be(true);expect(fs.existsSync(path.join(h,"package-zip.zip"))).to.be(false);f()}).done()});it("should copy extracted folder contents if archive contains only a folder inside",function(f){var g=b(path.resolve(__dirname,"../../assets/package-zip-folder.zip"));g.resolve().then(function(h){expect(fs.existsSync(path.join(h,"foo.js"))).to.be(true);expect(fs.existsSync(path.join(h,"bar.js"))).to.be(true);expect(fs.existsSync(path.join(h,"package-zip"))).to.be(false);expect(fs.existsSync(path.join(h,"package-zip-folder"))).to.be(false);expect(fs.existsSync(path.join(h,"package-zip-folder.zip"))).to.be(false);f()}).done()});it("should extract if source is an archive and rename to index if it's only one file inside",function(f){var g=b(path.resolve(__dirname,"../../assets/package-zip-single-file.zip"));g.resolve().then(function(h){expect(fs.existsSync(path.join(h,"index.js"))).to.be(true);expect(fs.existsSync(path.join(h,"package-zip"))).to.be(false);expect(fs.existsSync(path.join(h,"package-zip-single-file"))).to.be(false);expect(fs.existsSync(path.join(h,"package-zip-single-file.zip"))).to.be(false);return e(h,"index.js").then(f.bind(f,null))}).done()});it("should rename single file from a single folder to index when source is an archive",function(f){var g=b(path.resolve(__dirname,"../../assets/package-zip-folder-single-file.zip"));g.resolve().then(function(h){expect(fs.existsSync(path.join(h,"index.js"))).to.be(true);expect(fs.existsSync(path.join(h,"package-zip"))).to.be(false);expect(fs.existsSync(path.join(h,"package-zip-folder-single-file"))).to.be(false);expect(fs.existsSync(path.join(h,"package-zip-folder-single-file.zip"))).to.be(false);return e(h,"index.js").then(f.bind(f,null))}).done()})});describe("#isTargetable",function(){it("should return false",function(){expect(FsResolver.isTargetable()).to.be(false)})})});