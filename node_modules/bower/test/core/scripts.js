var path=require("path");var bower=require("../../lib/index.js");var mkdirp=require("mkdirp");var rimraf=require("rimraf");var fs=require("fs");var expect=require("expect.js");var scripts=require("../../lib/core/scripts.js");describe("scripts",function(){var d=path.join(__dirname,"../tmp/temp-scripts");var a="package-zip";var c=path.join(__dirname,"../assets/"+a+".zip");var b={cwd:d,scripts:{preinstall:"touch preinstall_%",postinstall:"touch postinstall_%",preuninstall:"touch preuninstall_%"}};before(function(e){mkdirp(d,e)});after(function(e){rimraf(d,e)});it("should run preinstall and postinstall hooks.",function(e){bower.commands.install([c],undefined,b).on("end",function(f){expect(fs.existsSync(path.join(d,"preinstall_"+a))).to.be(true);expect(fs.existsSync(path.join(d,"postinstall_"+a))).to.be(true);e()})});it("should run preuninstall hook.",function(e){bower.commands.uninstall([a],undefined,b).on("end",function(f){expect(fs.existsSync(path.join(d,"preuninstall_"+a))).to.be(true);e()})});it("should not break anything when no hooks configured.",function(e){bower.commands.uninstall([a],undefined,{cwd:d}).on("end",function(f){e()})});it("should reorder packages by dependencies, while trying to maintain order from bower.json, correctly.",function(){var l={dependencies:{angular:"*"}};var g={dependencies:{}};var m={dependencies:{jquery:"*"}};var h={dependencies:{}};var k={dependencies:{jquery:"*"}};var n={dependencies:{"something-not-installed":"*"}};var j={select2:k,"angular-ui":l,jquery:g,"bad-package":n,angular:m,moment:h};var f=[];var e={dependencies:{jquery:"*",select2:"*","angular-ui":"*",angular:"*",moment:"*"}};var i=scripts._orderByDependencies(j,f,e);expect(i).to.eql(["jquery","select2","angular","angular-ui","moment","bad-package"])});it("should process scripts with quotes and vars in the cmd properly.",function(e){b.scripts.preinstall='touch "$BOWER_PID %"';bower.commands.install([c],undefined,b).on("end",function(f){expect(fs.existsSync(path.join(d,process.pid+" "+a))).to.be(true);e()})})});