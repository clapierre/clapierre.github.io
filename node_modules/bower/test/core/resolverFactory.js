var expect=require("expect.js");var fs=require("graceful-fs");var path=require("path");var mkdirp=require("mkdirp");var mout=require("mout");var Q=require("q");var rimraf=require("rimraf");var RegistryClient=require("bower-registry-client");var Logger=require("bower-logger");var resolverFactory=require("../../lib/core/resolverFactory");var resolvers=require("../../lib/core/resolvers");var defaultConfig=require("../../lib/config");describe("resolverFactory",function(){var d;var a=new Logger();var c=new RegistryClient(defaultConfig({cache:defaultConfig()._registry}));afterEach(function(e){a.removeAllListeners();if(d){rimraf(d,e);d=null}else{e()}});after(function(e){rimraf("dejavu",e)});function b(f,e){return resolverFactory(f,defaultConfig(e),a,c)}it("should recognize git remote endpoints correctly",function(f){var g=Q.resolve();var e;e={"git://hostname.com/user/project":"git://hostname.com/user/project","git://hostname.com/user/project/":"git://hostname.com/user/project","git://hostname.com/user/project.git":"git://hostname.com/user/project.git","git://hostname.com/user/project.git/":"git://hostname.com/user/project.git","git@hostname.com:user/project":"git@hostname.com:user/project","git@hostname.com:user/project/":"git@hostname.com:user/project","git@hostname.com:user/project.git":"git@hostname.com:user/project.git","git@hostname.com:user/project.git/":"git@hostname.com:user/project.git","git+ssh://user@hostname.com:project":"ssh://user@hostname.com:project","git+ssh://user@hostname.com:project/":"ssh://user@hostname.com:project","git+ssh://user@hostname.com:project.git":"ssh://user@hostname.com:project.git","git+ssh://user@hostname.com:project.git/":"ssh://user@hostname.com:project.git","git+ssh://user@hostname.com/project":"ssh://user@hostname.com/project","git+ssh://user@hostname.com/project/":"ssh://user@hostname.com/project","git+ssh://user@hostname.com/project.git":"ssh://user@hostname.com/project.git","git+ssh://user@hostname.com/project.git/":"ssh://user@hostname.com/project.git","git+http://hostname.com/project/blah":"http://hostname.com/project/blah","git+http://hostname.com/project/blah/":"http://hostname.com/project/blah","git+http://hostname.com/project/blah.git":"http://hostname.com/project/blah.git","git+http://hostname.com/project/blah.git/":"http://hostname.com/project/blah.git","git+http://user@hostname.com/project/blah":"http://user@hostname.com/project/blah","git+http://user@hostname.com/project/blah/":"http://user@hostname.com/project/blah","git+http://user@hostname.com/project/blah.git":"http://user@hostname.com/project/blah.git","git+http://user@hostname.com/project/blah.git/":"http://user@hostname.com/project/blah.git","git+https://hostname.com/project/blah":"https://hostname.com/project/blah","git+https://hostname.com/project/blah/":"https://hostname.com/project/blah","git+https://hostname.com/project/blah.git":"https://hostname.com/project/blah.git","git+https://hostname.com/project/blah.git/":"https://hostname.com/project/blah.git","git+https://user@hostname.com/project/blah":"https://user@hostname.com/project/blah","git+https://user@hostname.com/project/blah/":"https://user@hostname.com/project/blah","git+https://user@hostname.com/project/blah.git":"https://user@hostname.com/project/blah.git","git+https://user@hostname.com/project/blah.git/":"https://user@hostname.com/project/blah.git","ssh://user@hostname.com:project.git":"ssh://user@hostname.com:project.git","ssh://user@hostname.com:project.git/":"ssh://user@hostname.com:project.git","ssh://user@hostname.com/project.git":"ssh://user@hostname.com/project.git","ssh://user@hostname.com/project.git/":"ssh://user@hostname.com/project.git","http://hostname.com/project.git":"http://hostname.com/project.git","http://hostname.com/project.git/":"http://hostname.com/project.git","http://user@hostname.com/project.git":"http://user@hostname.com/project.git","http://user@hostname.com/project.git/":"http://user@hostname.com/project.git","https://hostname.com/project.git":"https://hostname.com/project.git","https://hostname.com/project.git/":"https://hostname.com/project.git","https://user@hostname.com/project.git":"https://user@hostname.com/project.git","https://user@hostname.com/project.git/":"https://user@hostname.com/project.git","bower/bower":"git://github.com/bower/bower.git"};mout.object.forOwn(e,function(i,h){g=g.then(function(){return b({source:h})}).then(function(j){expect(j).to.be.a(resolvers.GitRemote);expect(j).to.not.be(resolvers.GitHub);expect(j.getSource()).to.equal(i);expect(j.getTarget()).to.equal("*")});g=g.then(function(){return b({source:h,target:"commit-ish"})}).then(function(j){expect(j).to.be.a(resolvers.GitRemote);expect(j).to.not.be(resolvers.GitHub);expect(j.getSource()).to.equal(i);expect(j.getTarget()).to.equal("commit-ish")});g=g.then(function(){return b({name:"foo",source:h})}).then(function(j){expect(j).to.be.a(resolvers.GitRemote);expect(j).to.not.be(resolvers.GitHub);expect(j.getSource()).to.equal(i);expect(j.getName()).to.equal("foo");expect(j.getTarget()).to.equal("*")})});g.then(f.bind(f,null)).done()});it("should recognize GitHub endpoints correctly",function(e){var g=Q.resolve();var f;var h;f={"git://github.com/user/project":"git://github.com/user/project.git","git://github.com/user/project/":"git://github.com/user/project.git","git://github.com/user/project.git":"git://github.com/user/project.git","git://github.com/user/project.git/":"git://github.com/user/project.git","git@github.com:user/project":"git@github.com:user/project.git","git@github.com:user/project/":"git@github.com:user/project.git","git@github.com:user/project.git":"git@github.com:user/project.git","git@github.com:user/project.git/":"git@github.com:user/project.git","git+ssh://git@github.com:project/blah":"ssh://git@github.com:project/blah.git","git+ssh://git@github.com:project/blah/":"ssh://git@github.com:project/blah.git","git+ssh://git@github.com:project/blah.git":"ssh://git@github.com:project/blah.git","git+ssh://git@github.com:project/blah.git/":"ssh://git@github.com:project/blah.git","git+ssh://git@github.com/project/blah":"ssh://git@github.com/project/blah.git","git+ssh://git@github.com/project/blah/":"ssh://git@github.com/project/blah.git","git+ssh://git@github.com/project/blah.git":"ssh://git@github.com/project/blah.git","git+ssh://git@github.com/project/blah.git/":"ssh://git@github.com/project/blah.git","git+http://github.com/project/blah":"http://github.com/project/blah.git","git+http://github.com/project/blah/":"http://github.com/project/blah.git","git+http://github.com/project/blah.git":"http://github.com/project/blah.git","git+http://github.com/project/blah.git/":"http://github.com/project/blah.git","git+http://user@github.com/project/blah":"http://user@github.com/project/blah.git","git+http://user@github.com/project/blah/":"http://user@github.com/project/blah.git","git+http://user@github.com/project/blah.git":"http://user@github.com/project/blah.git","git+http://user@github.com/project/blah.git/":"http://user@github.com/project/blah.git","git+https://github.com/project/blah":"https://github.com/project/blah.git","git+https://github.com/project/blah/":"https://github.com/project/blah.git","git+https://github.com/project/blah.git":"https://github.com/project/blah.git","git+https://github.com/project/blah.git/":"https://github.com/project/blah.git","git+https://user@github.com/project/blah":"https://user@github.com/project/blah.git","git+https://user@github.com/project/blah/":"https://user@github.com/project/blah.git","git+https://user@github.com/project/blah.git":"https://user@github.com/project/blah.git","git+https://user@github.com/project/blah.git/":"https://user@github.com/project/blah.git","ssh://git@github.com:project/blah.git":"ssh://git@github.com:project/blah.git","ssh://git@github.com:project/blah.git/":"ssh://git@github.com:project/blah.git","ssh://git@github.com/project/blah.git":"ssh://git@github.com/project/blah.git","ssh://git@github.com/project/blah.git/":"ssh://git@github.com/project/blah.git","http://github.com/project/blah.git":"http://github.com/project/blah.git","http://github.com/project/blah.git/":"http://github.com/project/blah.git","http://user@github.com/project/blah.git":"http://user@github.com/project/blah.git","http://user@github.com/project/blah.git/":"http://user@github.com/project/blah.git","https://github.com/project/blah.git":"https://github.com/project/blah.git","https://github.com/project/blah.git/":"https://github.com/project/blah.git","https://user@github.com/project/blah.git":"https://user@github.com/project/blah.git","https://user@github.com/project/blah.git/":"https://user@github.com/project/blah.git","bower/bower":"git://github.com/bower/bower.git"};h=["git://github.com/user/project/bleh.git","git://xxxxgithub.com/user/project.git","git@xxxxgithub.com:user:project.git","git@xxxxgithub.com:user/project.git","git+ssh://git@xxxxgithub.com:user/project","git+ssh://git@xxxxgithub.com/user/project","git+http://user@xxxxgithub.com/user/project","git+https://user@xxxxgithub.com/user/project","ssh://git@xxxxgithub.com:user/project.git","ssh://git@xxxxgithub.com/user/project.git","http://xxxxgithub.com/user/project.git","https://xxxxgithub.com/user/project.git","http://user@xxxxgithub.com/user/project.git","https://user@xxxxgithub.com/user/project.git"];mout.object.forOwn(f,function(j,i){g=g.then(function(){return b({source:i})}).then(function(k){expect(k).to.be.a(resolvers.GitHub);expect(k.getSource()).to.equal(j);expect(k.getTarget()).to.equal("*")});g=g.then(function(){return b({source:i,target:"commit-ish"})}).then(function(k){if(j){expect(k).to.be.a(resolvers.GitHub);expect(k.getSource()).to.equal(j);expect(k.getTarget()).to.equal("commit-ish")}else{expect(k).to.not.be.a(resolvers.GitHub)}});g=g.then(function(){return b({name:"foo",source:i})}).then(function(k){if(j){expect(k).to.be.a(resolvers.GitHub);expect(k.getSource()).to.equal(j);expect(k.getName()).to.equal("foo");expect(k.getTarget()).to.equal("*")}else{expect(k).to.not.be.a(resolvers.GitHub)}})});h.forEach(function(i){g=g.then(function(){return b({source:i})}).then(function(j){expect(j).to.not.be.a(resolvers.GitHub);expect(j).to.be.a(resolvers.GitRemote)})});g.then(e.bind(e,null)).done()});it("should recognize local fs git endpoints correctly",function(g){var h=Q.resolve();var f;var e;f={};e=path.resolve(__dirname,"../assets/package-a");f[e]=e;e=path.resolve(__dirname,"../assets/package-a")+"/";f[e]=e;f[__dirname+"/../assets/package-a"]=e;mout.object.forOwn(f,function(j,i){h=h.then(function(){return b({source:i})}).then(function(k){expect(k).to.be.a(resolvers.GitFs);expect(k.getTarget()).to.equal("*")});h=h.then(function(){return b({name:"foo",source:i})}).then(function(k){expect(k).to.be.a(resolvers.GitFs);expect(k.getName()).to.equal("foo");expect(k.getTarget()).to.equal("*")})});h.then(g.bind(g,null)).done()});it("should recognize svn remote endpoints correctly",function(f){var g=Q.resolve();var e;e={"svn://hostname.com/user/project":"http://hostname.com/user/project","svn://hostname.com/user/project/":"http://hostname.com/user/project","svn://svn@hostname.com:user/project":"http://svn@hostname.com:user/project","svn://svn@hostname.com:user/project/":"http://svn@hostname.com:user/project","svn+http://hostname.com/project/blah":"http://hostname.com/project/blah","svn+http://hostname.com/project/blah/":"http://hostname.com/project/blah","svn+http://user@hostname.com/project/blah":"http://user@hostname.com/project/blah","svn+http://user@hostname.com/project/blah/":"http://user@hostname.com/project/blah","svn+https://hostname.com/project/blah":"https://hostname.com/project/blah","svn+https://hostname.com/project/blah/":"https://hostname.com/project/blah","svn+https://user@hostname.com/project/blah":"https://user@hostname.com/project/blah","svn+https://user@hostname.com/project/blah/":"https://user@hostname.com/project/blah","svn+ssh://hostname.com/project/blah":"svn+ssh://hostname.com/project/blah","svn+ssh://hostname.com/project/blah/":"svn+ssh://hostname.com/project/blah","svn+ssh://user@hostname.com/project/blah":"svn+ssh://user@hostname.com/project/blah","svn+ssh://user@hostname.com/project/blah/":"svn+ssh://user@hostname.com/project/blah","svn+file:///project/blah":"file:///project/blah","svn+file:///project/blah/":"file:///project/blah"};mout.object.forOwn(e,function(i,h){g=g.then(function(){return b({source:h})}).then(function(j){expect(j).to.be.a(resolvers.Svn);expect(j).to.not.be(resolvers.GitHub);expect(resolvers.Svn.getSource(j.getSource())).to.equal(i);expect(j.getTarget()).to.equal("*")});g=g.then(function(){return b({source:h,target:"commit-ish"})}).then(function(j){expect(j).to.be.a(resolvers.Svn);expect(j).to.not.be(resolvers.GitHub);expect(resolvers.Svn.getSource(j.getSource())).to.equal(i);expect(j.getTarget()).to.equal("commit-ish")});g=g.then(function(){return b({name:"foo",source:h})}).then(function(j){expect(j).to.be.a(resolvers.Svn);expect(j).to.not.be(resolvers.GitHub);expect(resolvers.Svn.getSource(j.getSource())).to.equal(i);expect(j.getName()).to.equal("foo");expect(j.getTarget()).to.equal("*")})});g.then(f.bind(f,null)).done()});it("should recognize local fs files/folder endpoints correctly",function(g){var h=Q.resolve();var f;var e;d=path.resolve(__dirname,"../tmp/tmp");mkdirp.sync(d);fs.writeFileSync(path.join(d,".git"),"foo");fs.writeFileSync(path.join(d,"file.with.multiple.dots"),"foo");f={};f[d]=d;f[__dirname+"/../tmp/tmp"]=d;e=path.resolve(__dirname,"../assets/test-temp-dir");f[e]=e;f[__dirname+"/../assets/test-temp-dir"]=e;e=path.resolve(__dirname,"../assets/package-zip.zip");f[e]=e;f[__dirname+"/../assets/package-zip.zip"]=e;f["../"]=path.normalize(__dirname+"/../../..");f["./test/assets"]=path.join(__dirname,"../assets");f["./test"]=path.join(__dirname,"..");e=path.join(d,"file.with.multiple.dots");f[e]=e;mout.object.forOwn(f,function(j,i){h=h.then(function(){return b({source:i})}).then(function(k){expect(k.getSource()).to.equal(j);expect(k).to.be.a(resolvers.Fs);expect(k.getTarget()).to.equal("*")});h=h.then(function(){return b({name:"foo",source:i})}).then(function(k){expect(k).to.be.a(resolvers.Fs);expect(k.getName()).to.equal("foo");expect(k.getTarget()).to.equal("*");expect(k.getSource()).to.equal(j)})});h.then(g.bind(g,null)).done()});it("should recognize URL endpoints correctly",function(f){var g=Q.resolve();var e;e=["http://bower.io/foo.js","https://bower.io/foo.js"];e.forEach(function(h){g=g.then(function(){return b({source:h})}).then(function(i){expect(i).to.be.a(resolvers.Url);expect(i.getSource()).to.equal(h)});g=g.then(function(){return b({name:"foo",source:h})}).then(function(i){expect(i).to.be.a(resolvers.Url);expect(i.getName()).to.equal("foo");expect(i.getSource()).to.equal(h)})});g.then(f.bind(f,null)).done()});it("should recognize registry endpoints correctly",function(e){fs.writeFileSync("dejavu","foo");b({source:"dejavu"}).then(function(f){expect(f).to.be.a(resolvers.GitRemote);expect(f.getSource()).to.equal("git://github.com/IndigoUnited/dejavu.git");expect(f.getTarget()).to.equal("*")}).then(function(){return b({source:"dejavu",name:"foo"}).then(function(f){expect(f).to.be.a(resolvers.GitRemote);expect(f.getSource()).to.equal("git://github.com/IndigoUnited/dejavu.git");expect(f.getName()).to.equal("foo");expect(f.getTarget()).to.equal("*")})}).then(function(){return b({source:"dejavu",target:"~2.0.0"}).then(function(f){expect(f).to.be.a(resolvers.GitRemote);expect(f.getTarget()).to.equal("~2.0.0");e()})}).done()});it("should error out if the package was not found in the registry",function(e){b({source:"some-package-that-will-never-exist"}).then(function(){throw new Error("Should have failed")},function(f){expect(f).to.be.an(Error);expect(f.code).to.equal("ENOTFOUND");expect(f.message).to.contain("some-package-that-will-never-exist");e()}).done()});it("should set registry to true on the decomposed endpoint if fetched from the registry",function(e){var f={source:"dejavu"};b(f).then(function(){expect(f.registry).to.be(true);e()}).done()});it("should use the configured shorthand resolver",function(e){b({source:"bower/bower"}).then(function(g){var f={shorthandResolver:"git://bower.io/{{owner}}/{{package}}/{{shorthand}}"};expect(g.getSource()).to.equal("git://github.com/bower/bower.git");return b({source:"IndigoUnited/promptly"},f)}).then(function(f){expect(f.getSource()).to.equal("git://bower.io/IndigoUnited/promptly/IndigoUnited/promptly");e()}).done()});it("should not expand using the shorthand resolver if it looks like a SSH URL",function(e){b({source:"bleh@xxx.com:foo/bar"}).then(function(f){throw new Error("Should have failed")},function(f){expect(f).to.be.an(Error);expect(f.code).to.equal("ENOTFOUND");expect(f.message).to.contain("bleh@xxx.com:foo/bar");e()}).done()});it("should error out if there's no suitable resolver for a given source",function(e){resolverFactory({source:"some-package-that-will-never-exist"},defaultConfig(),a).then(function(){throw new Error("Should have failed")},function(f){expect(f).to.be.an(Error);expect(f.code).to.be("ENORESOLVER");expect(f.message).to.contain("appropriate resolver");e()}).done()});it.skip("should use config.cwd when resolving relative paths");it("should not swallow constructor errors when instantiating resolvers",function(f){var g=Q.resolve();var e;e=["http://bower.io/foo.js",path.resolve(__dirname,"../assets/test-temp-dir")];e.forEach(function(h){g=g.then(function(){return b({source:h,target:"bleh"})}).then(function(){throw new Error("Should have failed")},function(i){expect(i).to.be.an(Error);expect(i.message).to.match(/can't resolve targets/i);expect(i.code).to.equal("ENORESTARGET")})});g.then(f.bind(f,null)).done()});describe(".clearRuntimeCache",function(){it("should call every resolver static method that clears the runtime cache",function(){var i={};var g=[];var f;mout.object.forOwn(resolvers,function(e,j){i[j]=e.clearRuntimeCache;e.clearRuntimeCache=function(){g.push(j);return i[j].apply(this,arguments)}});try{resolverFactory.clearRuntimeCache()}catch(h){f=h}finally{mout.object.forOwn(resolvers,function(e,j){e.clearRuntimeCache=i[j]})}if(f){throw f}expect(g.sort()).to.eql(Object.keys(resolvers).sort())})})});