var path=require("path");var mout=require("mout");var Q=require("q");var Project=require("../core/Project");var semver=require("../util/semver");var cli=require("../util/cli");var defaultConfig=require("../config");function list(c,b,a){var d;b=b||{};if(b.paths&&b.relative==null){b.relative=true}a=defaultConfig(a);d=new Project(a,c);return d.getTree(b).spread(function(e,f){d.walkTree(e,function(g){if(g.missing){return}if(b.relative){g.canonicalDir=path.relative(a.cwd,g.canonicalDir)}if(b.paths){g.canonicalDir=normalize(g.canonicalDir)}},true);mout.object.forOwn(f,function(g){if(g.missing){return}if(b.relative){g.canonicalDir=path.relative(a.cwd,g.canonicalDir)}if(b.paths){g.canonicalDir=normalize(g.canonicalDir)}});if(b.paths){return paths(f)}if(a.offline){return e}return checkVersions(d,e,c).then(function(){return e})})}function checkVersions(f,a,c){var d;var b=[];var e=f.getPackageRepository();f.walkTree(a,function(g){if(!g.linked){b.push(g)}},true);if(b.length){c.info("check-new","Checking for new versions of the project dependencies..")}d=b.map(function(g){var h=g.endpoint.target;return e.versions(g.endpoint.source).then(function(i){g.versions=i;if(i.length&&semver.validRange(h)){g.update={target:semver.maxSatisfying(i,h),latest:semver.maxSatisfying(i,"*")}}})});a.versions=[];return Q.all(d)}function paths(b){var a={};mout.object.forOwn(b,function(e,d){var c;if(e.missing){return}c=e.pkgMeta.main;if(!c){a[d]=e.canonicalDir;return}if(typeof c==="string"){c=[c]}c=c.map(function(f){return normalize(path.join(e.canonicalDir,f).trim())});a[d]=c.length===1?c[0]:c});return a}function normalize(a){return a.replace(/\\/g,"/")}list.line=function(c,a){var b=list.options(a);return list(c,b)};list.options=function(a){return cli.readOptions({paths:{type:Boolean,shorthand:"p"},relative:{type:Boolean,shorthand:"r"}},a)};list.completion=function(){};module.exports=list;