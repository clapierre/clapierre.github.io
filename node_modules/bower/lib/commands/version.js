var semver=require("semver");var which=require("which");var fs=require("fs");var path=require("path");var Q=require("q");var execFile=require("child_process").execFile;var Project=require("../core/Project");var cli=require("../util/cli");var defaultConfig=require("../config");var createError=require("../util/createError");function version(c,e,b,a){var d;a=defaultConfig(a);d=new Project(a,c);return bump(d,e,b.message)}function bump(c,e,a){var b;var d=false;return checkGit().then(function(f){d=f}).then(c.getJson.bind(c)).then(function(f){b=getNewVersion(f.version,e);f.version=b}).then(c.saveJson.bind(c)).then(function(){if(d){return gitCommitAndTag(b,a)}}).then(function(){console.log("v"+b)})}function getNewVersion(a,c){var b=semver.valid(c);if(!b){b=semver.inc(a,c)}if(!b){throw createError("Invalid version argument: `"+c+"`. Usage: `bower version [<newversion> | major | minor | patch]`","EINVALIDVERSION")}if(a===b){throw createError("Version not changed","EVERSIONNOTCHANGED")}return b}function checkGit(){var a=path.join(process.cwd(),".git");return Q.nfcall(fs.stat,a).then(function(b){if(b.isDirectory()){return checkGitStatus()}return false},function(){return false})}function checkGitStatus(){return Q.nfcall(which,"git").fail(function(a){a.code="ENOGIT";throw a}).then(function(){return Q.nfcall(execFile,"git",["status","--porcelain"],{env:process.env})}).then(function(c){var a=c[0];var b=filterModifiedStatusLines(a);if(b.length){throw createError("Git working directory not clean.\n"+b.join("\n"),"EWORKINGDIRECTORYDIRTY")}return true})}function filterModifiedStatusLines(a){return a.trim().split("\n").filter(function(b){return b.trim()&&!b.match(/^\?\? /)}).map(function(b){return b.trim()})}function gitCommitAndTag(c,b){var a="v"+c;b=b||a;b=b.replace(/%s/g,c);return Q.nfcall(execFile,"git",["add","bower.json"],{env:process.env}).then(function(){return Q.nfcall(execFile,"git",["commit","-m",b],{env:process.env})}).then(function(){return Q.nfcall(execFile,"git",["tag",a,"-am",b],{env:process.env})})}version.line=function(c,a){var b=version.options(a);return version(c,b.argv.remain[1],b)};version.options=function(a){return cli.readOptions({message:{type:String,shorthand:"m"}},a)};version.completion=function(){};module.exports=version;