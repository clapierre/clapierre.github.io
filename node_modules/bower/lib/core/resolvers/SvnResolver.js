var util=require("util");var Q=require("q");var which=require("which");var LRU=require("lru-cache");var mout=require("mout");var Resolver=require("./Resolver");var semver=require("../../util/semver");var createError=require("../../util/createError");var cmd=require("../../util/cmd");var hasSvn;try{which.sync("svn");hasSvn=true}catch(ex){hasSvn=false}function SvnResolver(c,b,a){Resolver.call(this,c,b,a);if(!hasSvn){throw createError("svn is not installed or not in the PATH","ENOSVN")}}util.inherits(SvnResolver,Resolver);mout.object.mixIn(SvnResolver,Resolver);SvnResolver.getSource=function(b){var a=this._source||b;return a.replace(/^svn\+(https?|file):\/\//i,"$1://").replace("svn://","http://").replace(/\/+$/,"")};SvnResolver.prototype._hasNew=function(b,c){var a=c._resolution||{};return this._findResolution().then(function(d){if(a.type!==d.type){return true}if(d.type==="version"&&semver.neq(d.tag,a.tag)){return true}return d.commit!==a.commit})};SvnResolver.prototype._resolve=function(){var a=this;return this._findResolution().then(function(){return a._export()})};SvnResolver.prototype._export=function(){var d;var e;var a;var c=this;var b=this._resolution;this.source=SvnResolver.getSource(this._source);this._logger.action("export",b.tag||b.branch||b.commit,{resolution:b,to:this._tempDir});if(b.type==="commit"){d=cmd("svn",["export","--force",this._source+"/trunk","-r"+b.commit,this._tempDir])}else{if(b.type==="branch"&&b.branch==="trunk"){d=cmd("svn",["export","--force",this._source+"/trunk",this._tempDir])}else{if(b.type==="branch"){d=cmd("svn",["export","--force",this._source+"/branches/"+b.branch,this._tempDir])}else{d=cmd("svn",["export","--force",this._source+"/tags/"+b.tag,this._tempDir])}}}a=mout.fn.throttle(function(g){var f;f=g.split(/[\r\n]+/);f.forEach(function(h){if(/\d{1,3}\%/.test(h)){c._logger.info("progress",h.trim())}})},1000);e=setTimeout(function(){d.progress(a)},8000);return d.fail(function(f){throw f}).fin(function(){clearTimeout(e);a.cancel()})};SvnResolver.prototype._findResolution=function(d){var c;var a=this.constructor;var b=this;d=d||this._target||"*";this._source=SvnResolver.getSource(this._source);if((/^r\d+/).test(d)){d=d.split("r");this._resolution={type:"commit",commit:d[1]};return Q.resolve(this._resolution)}if(semver.validRange(d)){return a.versions(this._source,true).then(function(e){var h,f,g;h=e.map(function(i){return i.version});if(!e.length&&d==="*"){return b._findResolution("trunk")}h=e.map(function(i){return i.version});g=semver.maxSatisfyingIndex(h,d,true);if(g!==-1){f=e[g];return b._resolution={type:"version",tag:f.tag,commit:f.commit}}return Q.all([a.branches(b._source),a.tags(b._source)]).spread(function(i,j){if(mout.object.hasOwn(j,d)){return b._resolution={type:"tag",tag:d,commit:j[d]}}if(mout.object.hasOwn(i,d)){return b._resolution={type:"branch",branch:d,commit:i[d]}}throw createError("No tag found that was able to satisfy "+d,"ENORESTARGET",{details:!e.length?"No versions found in "+b._source:"Available versions: "+e.map(function(k){return k.version}).join(", ")})})})}return Q.all([a.branches(b._source),a.tags(b._source)]).spread(function(e,f){if(mout.object.hasOwn(f,d)){return b._resolution={type:"tag",tag:d,commit:f[d]}}if(mout.object.hasOwn(e,d)){return b._resolution={type:"branch",branch:d,commit:e[d]}}e=Object.keys(e);f=Object.keys(f);c=createError("target "+d+" does not exist","ENORESTARGET");c.details=!f.length?"No tags found in "+b._source:"Available tags: "+f.join(", ");c.details+="\n";c.details+=!e.length?"No branches found in "+b._source:"Available branches: "+e.join(", ");throw c})};SvnResolver.prototype._savePkgMeta=function(b){var a;if(this._resolution.type==="version"){a=semver.clean(this._resolution.tag);if(typeof b.version==="string"&&semver.neq(b.version,a)){this._logger.warn("mismatch","Version declared in the json ("+b.version+") is different than the resolved one ("+a+")",{resolution:this._resolution,pkgMeta:b})}b.version=a}else{delete b.version}b._release=a||this._resolution.tag||this._resolution.commit;b._resolution=this._resolution;return Resolver.prototype._savePkgMeta.call(this,b)};SvnResolver.versions=function(c,a){c=SvnResolver.getSource(c);var b=this._cache.versions.get(c);if(b){return Q.resolve(b).then(function(){var d=this._cache.versions.get(c);if(!a){d=d.map(function(e){return e.version})}return d}.bind(this))}b=this.tags(c).then(function(g){var e;var f;var d=[];for(e in g){f=semver.clean(e);if(f){d.push({version:f,tag:e,commit:g[e]})}}d.sort(function(i,h){return semver.rcompare(i.version,h.version)});this._cache.versions.set(c,d);return this.versions(c,a)}.bind(this));this._cache.versions.set(c,b);return b};SvnResolver.tags=function(b){b=SvnResolver.getSource(b);var a=this._cache.tags.get(b);if(a){return Q.resolve(a)}a=cmd("svn",["list",b+"/tags","--verbose"]).spread(function(d){var c=SvnResolver.parseSubversionListOutput(d.toString());this._cache.tags.set(b,c);return c}.bind(this));this._cache.tags.set(b,a);return a};SvnResolver.branches=function(b){b=SvnResolver.getSource(b);var a=this._cache.branches.get(b);if(a){return Q.resolve(a)}a=cmd("svn",["list",b+"/branches","--verbose"]).spread(function(d){var c=SvnResolver.parseSubversionListOutput(d.toString());c.trunk="*";this._cache.branches.set(b,c);return c}.bind(this));this._cache.branches.set(b,a);return a};SvnResolver.parseSubversionListOutput=function(c){var a={};var b=c.trim().split(/[\r\n]+/);b.forEach(function(d){var e=d.match(/\s+([0-9]+)\s.+\s([\w.$-]+)\//i);if(e&&e[2]!=="."){a[e[2]]=e[1]}});return a};SvnResolver.clearRuntimeCache=function(){mout.object.forOwn(SvnResolver._cache,function(a){a.reset()})};SvnResolver._cache={branches:new LRU({max:50,maxAge:5*60*1000}),tags:new LRU({max:50,maxAge:5*60*1000}),versions:new LRU({max:50,maxAge:5*60*1000})};module.exports=SvnResolver;