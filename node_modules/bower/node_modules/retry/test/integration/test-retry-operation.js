var common=require("../common");var assert=common.assert;var fake=common.fake.create();var retry=require(common.dir.lib+"/retry");(function testErrors(){var a=retry.operation();var b=new Error("some error");var c=new Error("some other error");a._errors.push(b);a._errors.push(c);assert.deepEqual(a.errors(),[b,c])})();(function testMainErrorReturnsMostFrequentError(){var a=retry.operation();var b=new Error("some error");var c=new Error("some other error");a._errors.push(b);a._errors.push(c);a._errors.push(b);assert.strictEqual(a.mainError(),b)})();(function testMainErrorReturnsLastErrorOnEqualCount(){var a=retry.operation();var b=new Error("some error");var c=new Error("some other error");a._errors.push(b);a._errors.push(c);assert.strictEqual(a.mainError(),c)})();(function testAttempt(){var a=retry.operation();var c=new Function();var b={timeout:1,cb:function(){}};a.attempt(c,b);assert.strictEqual(c,a._fn);assert.strictEqual(b.timeout,a._operationTimeout);assert.strictEqual(b.cb,a._operationTimeoutCb)})();(function testRetry(){var f=3;var b=new Error("some error");var a=retry.operation([1,2,3]);var c=0;var e=fake.callback("finalCallback");fake.expectAnytime(e);var d=function(){a.attempt(function(g){c++;assert.equal(g,c);if(a.retry(b)){return}assert.strictEqual(c,4);assert.strictEqual(a.attempts(),c);assert.strictEqual(a.mainError(),b);e()})};d()})();