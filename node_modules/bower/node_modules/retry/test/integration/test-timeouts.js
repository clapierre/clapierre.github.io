var common=require("../common");var assert=common.assert;var retry=require(common.dir.lib+"/retry");(function testDefaultValues(){var a=retry.timeouts();assert.equal(a.length,10);assert.equal(a[0],1000);assert.equal(a[1],2000);assert.equal(a[2],4000)})();(function testDefaultValuesWithRandomize(){var b=5000;var a=retry.timeouts({minTimeout:b,randomize:true});assert.equal(a.length,10);assert.ok(a[0]>b);assert.ok(a[1]>a[0]);assert.ok(a[2]>a[1])})();(function testPassedTimeoutsAreUsed(){var b=[1000,2000,3000];var a=retry.timeouts(b);assert.deepEqual(a,b);assert.notStrictEqual(a,b)})();(function testTimeoutsAreWithinBoundaries(){var c=1000;var b=10000;var a=retry.timeouts({minTimeout:c,maxTimeout:b});for(var d=0;d<a;d++){assert.ok(a[d]>=c);assert.ok(a[d]<=b)}})();(function testTimeoutsAreIncremental(){var b=retry.timeouts();var a=b[0];for(var c=0;c<b;c++){assert.ok(b[c]>a);a=b[c]}})();(function testTimeoutsAreIncrementalForFactorsLessThanOne(){var a=retry.timeouts({retries:3,factor:0.5});var b=[250,500,1000];assert.deepEqual(b,a)})();(function testRetries(){var a=retry.timeouts({retries:2});assert.strictEqual(a.length,2)})();