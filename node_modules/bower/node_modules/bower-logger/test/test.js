var expect=require("expect.js");var EventEmitter=require("events").EventEmitter;var Logger=require("../");describe("Logger",function(){var a;beforeEach(function(){a=new Logger()});describe(".constructor",function(){it("should provide an instance of Logger",function(){expect(a instanceof Logger).to.be(true)});it("should provide an instance of EventEmitter",function(){expect(a instanceof EventEmitter).to.be(true)});it("should have prototype methods",function(){var b=["intercept","pipe","geminate","log"];b.forEach(function(c){expect(a).to.have.property(c)})})});describe("events",function(){var b={foo:"bar",baz:"string"};it("should pass through {}",function(c){a.on("log",function(d){expect(d.data).to.eql({});c()});a.info()});it("should pass through logData",function(c){a.on("log",function(d){expect(d.data).to.eql(b);c()});a.info("foo","message",b)});it("should emit error event",function(c){a.on("log",function(d){expect(d.level).to.eql("error");expect(d.id).to.eql("foo");expect(d.message).to.eql("error message");expect(d.data).to.eql({});c()});a.error("foo","error message")});it("should emit conflict event",function(c){a.on("log",function(d){expect(d.level).to.eql("conflict");expect(d.id).to.eql("foo");expect(d.message).to.eql("conflict message");expect(d.data).to.eql({});c()});a.conflict("foo","conflict message")});it("should emit warn event",function(c){a.on("log",function(d){expect(d.level).to.eql("warn");expect(d.id).to.eql("foo");expect(d.message).to.eql("warn message");expect(d.data).to.eql({});c()});a.warn("foo","warn message")});it("should emit action event",function(c){a.on("log",function(d){expect(d.level).to.eql("action");expect(d.id).to.eql("foo");expect(d.message).to.eql("action message");expect(d.data).to.eql({});c()});a.action("foo","action message")});it("should emit info event",function(c){a.on("log",function(d){expect(d.level).to.eql("info");expect(d.id).to.eql("foo");expect(d.message).to.eql("info message");expect(d.data).to.eql({});c()});a.info("foo","info message")});it("should emit debug event",function(c){a.on("log",function(d){expect(d.level).to.eql("debug");expect(d.id).to.eql("foo");expect(d.message).to.eql("debug message");expect(d.data).to.eql({});c()});a.debug("foo","debug message")})});describe(".intercept",function(){it("should add the function and call it when a log occurs",function(b){var c;var d={some:"thing"};a.intercept(function(e){c=true;expect(e).to.eql({level:"warn",id:"foo",message:"bar",data:d});expect(e.data).to.equal(d)});a.log("warn","foo","bar",d);expect(c).to.be(true);b()});it("should call the interceptors by order before emitting the event",function(b){var c=[];a.intercept(function(){c.push(1)});a.intercept(function(){c.push(2)});a.log("warn","foo","bar");expect(c).to.eql([1,2]);b()});it("should call the interceptors along the chain",function(c){var d=[];var b=a.geminate();b.intercept(function(){d.push(1)});a.intercept(function(){d.push(3)});b.on("log",function(){d.push(2)});a.on("log",function(){d.push(4)});b.log("warn","foo","bar");expect(d).to.eql([1,2,3,4]);c()})});describe(".pipe",function(){it("should return the passed emitter",function(){var b=new EventEmitter();expect(a.pipe(b)).to.equal(b)});it("should pipe log events to another emitter",function(b){var c=new EventEmitter();var d={some:"thing"};var e;a.pipe(c);c.on("log",function(f){e=true;expect(f).to.eql({level:"warn",id:"foo",message:"bar",data:d})});a.log("warn","foo","bar",d);expect(e).to.be(true);b()})});describe(".geminate",function(){it("should return a new logger instance",function(){var b=a.geminate();expect(b).to.be.an(Logger);expect(b).to.be.an(EventEmitter);expect(b).to.not.be.equal(a)});it("should pipe the new logger events to the original logger",function(c){var e=[];var b=a.geminate();var d={some:"thing"};b.on("log",function(f){e.push(1);expect(f).to.eql({level:"warn",id:"foo",message:"bar",data:d});expect(f.data).to.equal(d)});a.on("log",function(f){e.push(2);expect(f).to.eql({level:"warn",id:"foo",message:"bar",data:d});expect(f.data).to.equal(d)});b.log("warn","foo","bar",d);expect(e).to.eql([1,2]);c()})});describe(".prompt",function(){it("should only allow calling the callback once",function(){var b=0;a.once("prompt",function(c,d){d({prompt:"bar"});d({prompt:"foo"})}).prompt({type:"input",message:"foo"},function(){b+=1});expect(b).to.equal(1)});it("should accept a prompt",function(b){a.once("prompt",function(c,d){d({prompt:"bar"})}).prompt({type:"input",message:"foo"},function(c,d){expect(c).to.not.be.ok();expect(d).to.equal("bar");b()})});it("should accept several prompts",function(b){a.once("prompt",function(c,d){d({foo:"bar",foz:"baz"})}).prompt([{name:"foo",type:"input",message:"foo"},{name:"foz",type:"confirm",message:"foz"}],function(c,d){expect(c).to.not.be.ok();expect(d.foo).to.equal("bar");expect(d.foz).to.equal("baz");a.once("prompt",function(e,f){f({foo:"bar"})}).prompt([{name:"foo",type:"input",message:"foo"}],function(e,f){expect(e).to.not.be.ok();expect(f.foo).to.equal("bar");b()})})});it("should error on invalid prompt type",function(b){a.prompt({type:"xxx",message:"foo"},function(c){expect(c).to.be.an(Error);expect(c.code).to.be("ENOTSUP");b()})});it("should trim the answers",function(b){a.once("prompt",function(c,d){d({prompt:" bar "})}).prompt({type:"input",message:"foo"},function(c,d){expect(c).to.not.be.ok();expect(d).to.equal("bar");b()})});it("should trim multiple response answers",function(b){a.once("prompt",function(c,d){d({prompt:[" bar "," foo","baz "]})}).prompt({type:"checkbox",message:"foo"},function(c,d){expect(c).to.not.be.ok();expect(d).to.eql(["bar","foo","baz"]);b()})})})});