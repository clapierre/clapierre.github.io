var vows=require("vows"),assert=require("assert"),path=require("path"),fs=require("fs"),existsSync=fs.existsSync||path.existsSync,tmp=require("../lib/tmp.js"),Test=require("./base.js");function _testFile(c,a){return function b(h,e,f){assert.ok(existsSync(e),"should exist");var g=fs.statSync(e);assert.equal(g.size,0,"should have zero size");assert.ok(g.isFile(),"should be a file");Test.testStat(g,c);if(a){var d=fs.fstatSync(f);assert.deepEqual(d,g,"fstat results should be the same");var i=new Buffer("something");assert.equal(fs.writeSync(f,i,0,i.length,0),i.length,"should be writable");assert.ok(!fs.closeSync(f),"should not return with error")}}}vows.describe("File creation").addBatch({"when using without parameters":{topic:function(){tmp.file(this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a file":_testFile(33152,true),"should have the default prefix":Test.testPrefix("tmp-"),"should have the default postfix":Test.testPostfix(".tmp")},"when using with prefix":{topic:function(){tmp.file({prefix:"something"},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a file":_testFile(33152,true),"should have the provided prefix":Test.testPrefix("something")},"when using with postfix":{topic:function(){tmp.file({postfix:".txt"},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a file":_testFile(33152,true),"should have the provided postfix":Test.testPostfix(".txt")},"when using template":{topic:function(){tmp.file({template:path.join(tmp.tmpdir,"clike-XXXXXX-postfix")},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a file":_testFile(33152,true),"should have the provided prefix":Test.testPrefix("clike-"),"should have the provided postfix":Test.testPostfix("-postfix")},"when using multiple options":{topic:function(){tmp.file({prefix:"foo",postfix:"bar",mode:416},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a file":_testFile(33184,true),"should have the provided prefix":Test.testPrefix("foo"),"should have the provided postfix":Test.testPostfix("bar")},"when using multiple options and mode":{topic:function(){tmp.file({prefix:"complicated",postfix:"options",mode:420},this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a file":_testFile(33188,true),"should have the provided prefix":Test.testPrefix("complicated"),"should have the provided postfix":Test.testPostfix("options")},"no tries":{topic:function(){tmp.file({tries:-1},this.callback)},"should not be created":assert.isObject},"keep testing":{topic:function(){Test.testKeep("file","1",this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should be a file":function(b,a){_testFile(33152,false)(b,a,null);fs.unlinkSync(a)}},"unlink testing":{topic:function(){Test.testKeep("file","0",this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should not exist":function(b,a){assert.ok(!existsSync(a),"File should be removed")}},"non graceful testing":{topic:function(){Test.testGraceful("file","0",this.callback)},"should not return with error":assert.isNull,"should return with a name":Test.assertName,"should be a file":function(b,a){_testFile(33152,false)(b,a,null);fs.unlinkSync(a)}},"graceful testing":{topic:function(){Test.testGraceful("file","1",this.callback)},"should not return with an error":assert.isNull,"should return with a name":Test.assertName,"should not exist":function(b,a){assert.ok(!existsSync(a),"File should be removed")}}}).exportTo(module);