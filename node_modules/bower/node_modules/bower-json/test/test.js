var path=require("path");var expect=require("expect.js");var bowerJson=require("../lib/json");describe(".find",function(){it("should find the bower.json file",function(a){bowerJson.find(__dirname+"/pkg-bower-json",function(c,b){if(c){return a(c)}expect(b).to.equal(path.resolve(__dirname+"/pkg-bower-json/bower.json"));a()})});it("should fallback to the component.json file",function(a){bowerJson.find(__dirname+"/pkg-component-json",function(c,b){if(c){return a(c)}expect(b).to.equal(path.resolve(__dirname+"/pkg-component-json/component.json"));a()})});it("should not fallback to the component.json file if it's a component(1) file",function(a){bowerJson.find(__dirname+"/pkg-component(1)-json",function(b){expect(b).to.be.an(Error);expect(b.code).to.equal("ENOENT");expect(b.message).to.equal("None of bower.json, component.json, .bower.json were found in "+__dirname+"/pkg-component(1)-json");a()})});it("should fallback to the .bower.json file",function(a){bowerJson.find(__dirname+"/pkg-dot-bower-json",function(c,b){if(c){return a(c)}expect(b).to.equal(path.resolve(__dirname+"/pkg-dot-bower-json/.bower.json"));a()})});it("should error if no component.json / bower.json / .bower.json is found",function(a){bowerJson.find(__dirname,function(b){expect(b).to.be.an(Error);expect(b.code).to.equal("ENOENT");expect(b.message).to.equal("None of bower.json, component.json, .bower.json were found in "+__dirname);a()})})});describe(".read",function(){it("should give error if file does not exists",function(a){bowerJson.read(__dirname+"/willneverexist",function(b){expect(b).to.be.an(Error);expect(b.code).to.equal("ENOENT");a()})});it("should give error if when reading an invalid json",function(a){bowerJson.read(__dirname+"/pkg-bower-json-malformed/bower.json",function(b){expect(b).to.be.an(Error);expect(b.code).to.equal("EMALFORMED");expect(b.file).to.equal(path.resolve(__dirname+"/pkg-bower-json-malformed/bower.json"));a()})});it("should read the file and give an object",function(a){bowerJson.read(__dirname+"/pkg-bower-json/bower.json",function(c,b){if(c){return a(c)}expect(b).to.be.an("object");expect(b.name).to.equal("some-pkg");expect(b.version).to.equal("0.0.0");a()})});it("should give the json file that was read",function(a){bowerJson.read(__dirname+"/pkg-bower-json",function(d,c,b){if(d){return a(d)}expect(b).to.equal(__dirname+"/pkg-bower-json/bower.json");a()})});it("should find for a json file if a directory is given",function(a){bowerJson.read(__dirname+"/pkg-component-json",function(d,c,b){if(d){return a(d)}expect(c).to.be.an("object");expect(c.name).to.equal("some-pkg");expect(c.version).to.equal("0.0.0");expect(b).to.equal(path.resolve(__dirname+"/pkg-component-json/component.json"));a()})});it("should validate the returned object unless validate is false",function(a){bowerJson.read(__dirname+"/pkg-bower-json-invalid/bower.json",function(b){expect(b).to.be.an(Error);expect(b.message).to.contain("name");expect(b.file).to.equal(path.resolve(__dirname+"/pkg-bower-json-invalid/bower.json"));bowerJson.read(__dirname+"/pkg-bower-json-invalid/bower.json",{validate:false},function(c){a(c)})})});it("should normalize the returned object if normalize is true",function(a){bowerJson.read(__dirname+"/pkg-bower-json/bower.json",function(c,b){if(c){return a(c)}expect(b.main).to.equal("foo.js");bowerJson.read(__dirname+"/pkg-bower-json/bower.json",{normalize:true},function(e,d){if(e){return a(e)}expect(d.main).to.eql(["foo.js"]);a()})})})});describe(".parse",function(){it("should return the same object, unless clone is true",function(){var a={name:"foo"};expect(bowerJson.parse(a)).to.equal(a);expect(bowerJson.parse(a,{clone:true})).to.not.equal(a);expect(bowerJson.parse(a,{clone:true})).to.eql(a)});it("should validate the passed object, unless validate is false",function(){expect(function(){bowerJson.parse({})}).to.throwException(/name/);expect(function(){bowerJson.parse({},{validate:false})}).to.not.throwException()});it("should not normalize the passed object unless normalize is true",function(){var a={name:"foo",main:"foo.js"};bowerJson.parse(a);expect(a.main).to.eql("foo.js");bowerJson.parse(a,{normalize:true});expect(a.main).to.eql(["foo.js"])})});describe(".validate",function(){it("should validate the name property",function(){expect(function(){bowerJson.validate({})}).to.throwException(/name/)})});describe(".normalize",function(){it("should normalize the main property",function(){var a={name:"foo",main:"foo.js"};bowerJson.normalize(a);expect(a.main).to.eql(["foo.js"])})});