"use strict";var expect=require("expect.js");var promptly=require("../index");var async=require("async");var stdout="";var oldWrite=process.stdout.write;process.stdout.write=function(a){stdout+=a;return oldWrite.apply(process.stdout,arguments)};describe("prompt()",function(){it("should prompt the user",function(a){stdout="";promptly.prompt("something: ",function(b,c){expect(b).to.be(null);expect(c).to.be("yeaa");expect(stdout).to.contain("something: ");a()});process.stdin.emit("data","yeaa\n")});it("should keep asking if no value is passed and no default was defined",function(a){stdout="";promptly.prompt("something: ",function(b,c){expect(b).to.be(null);expect(c).to.be("yeaa");expect(stdout).to.contain("something: ");expect(stdout.indexOf("something")).to.not.be(stdout.lastIndexOf("something"));a()});process.stdin.emit("data","\n");process.stdin.emit("data","yeaa\n")});it("should assume default value if nothing is passed",function(a){stdout="";promptly.prompt("something: ",{"default":""},function(b,c){expect(b).to.be(null);expect(c).to.be("");expect(stdout).to.contain("something: ");a()});process.stdin.emit("data","\n")});it("should trim the user input if trim is enabled",function(a){stdout="";promptly.prompt("something: ",{trim:true},function(b,c){expect(b).to.be(null);expect(c).to.be("yeaa");expect(stdout).to.contain("something: ");a()});process.stdin.emit("data"," yeaa \n")});it("should call validator after trimming",function(b){stdout="";var a=function(c){if(c!=="yeaa"){throw new Error("bla")}return c};promptly.prompt("something: ",{validator:a,retry:false},function(c,d){expect(c).to.be(null);expect(d).to.be("yeaa");expect(stdout).to.contain("something: ");b()});process.stdin.emit("data"," yeaa \n")});it("should assume values from the validator",function(b){stdout="";var a=function(){return"bla"};promptly.prompt("something: ",{validator:a},function(c,d){expect(c).to.be(null);expect(d).to.be("bla");expect(stdout).to.contain("something: ");b()});process.stdin.emit("data"," yeaa \n")});it("should automatically retry if a validator fails by default",function(b){stdout="";var a=function(c){if(c!=="yeaa"){throw new Error("bla")}return c};promptly.prompt("something: ",{validator:a,retry:true},function(c,d){expect(stdout).to.contain("something: ");expect(stdout.indexOf("something")).to.not.be(stdout.lastIndexOf("something"));expect(stdout).to.contain("bla");expect(d).to.equal("yeaa");b()});process.stdin.emit("data","wtf\n");process.stdin.emit("data","yeaa\n")});it("should give error if the validator fails and retry is false",function(b){stdout="";var a=function(){throw new Error("bla")};promptly.prompt("something: ",{validator:a,retry:false},function(c){expect(c).to.be.an(Error);expect(c.message).to.be("bla");expect(stdout).to.contain("something: ");b()});process.stdin.emit("data"," yeaa \n")});it("should give retry ability on error",function(b){stdout="";var a=function(d){if(d!=="yeaa"){throw new Error("bla")}return d},c=0;promptly.prompt("something: ",{validator:a,retry:false},function(d,e){c++;if(c===1){expect(d).to.be.an(Error);d.retry();return process.stdin.emit("data","yeaa\n")}expect(e).to.equal("yeaa");expect(stdout).to.contain("something: ");expect(stdout.indexOf("something")).to.not.be(stdout.lastIndexOf("something"));b()});process.stdin.emit("data","wtf\n")})});describe("choose()",function(){it("should keep asking on invalid choice",function(a){stdout="";promptly.choose("apple or orange: ",["apple","orange"],function(b,c){expect(b).to.be(null);expect(c).to.be("orange");expect(stdout).to.contain("apple or orange: ");expect(stdout.indexOf("apple or orange")).to.not.be(stdout.lastIndexOf("apple or orange"));expect(stdout).to.contain("Invalid choice");a()});process.stdin.emit("data","bleh\n");process.stdin.emit("data","orange\n")});it("should error on invalid choice if retry is disabled",function(a){stdout="";promptly.choose("apple or orange: ",["apple","orange"],{retry:false},function(b){expect(b).to.be.an(Error);expect(b.message).to.contain("choice");expect(stdout).to.contain("apple or orange: ");a()});process.stdin.emit("data","bleh\n")});it("should be ok on valid choice",function(a){stdout="";promptly.choose("apple or orange: ",["apple","orange"],function(b,c){expect(b).to.be(null);expect(c).to.be("apple");expect(stdout).to.contain("apple or orange: ");a()});process.stdin.emit("data","apple\n")});it("should not use strict comparison when matching against valid choices",function(a){stdout="";promptly.choose("choices: ",[1,2,3],function(b,c){expect(b).to.be(null);expect(typeof c).to.equal("number");expect(c).to.be(1);expect(stdout).to.contain("choices: ");a()});process.stdin.emit("data","1\n")})});describe("confirm()",function(){it("should be ok on valid choice and coerce to boolean values",function(a){stdout="";async.forEachSeries(["yes","Y","y","1"],function(c,b){promptly.confirm("test yes: ",{retry:false},function(d,e){expect(d).to.be(null);expect(e).to.be(true);expect(stdout).to.contain("test yes: ");b()});process.stdin.emit("data",c+"\n")},function(){async.forEachSeries(["no","N","n","0"],function(c,b){promptly.confirm("test no: ",function(d,e){expect(d).to.be(null);expect(e).to.be(false);expect(stdout).to.contain("test no: ");b()});process.stdin.emit("data",c+"\n")},a)})});it("should keep asking on invalid choice",function(a){stdout="";promptly.confirm("yes or no: ",function(b,c){expect(b).to.be(null);expect(c).to.be(true);expect(stdout).to.contain("yes or no: ");expect(stdout.indexOf("yes or no")).to.not.be(stdout.lastIndexOf("yes or no"));a()});process.stdin.emit("data","bleh\n");process.stdin.emit("data","y\n")});it("should error on invalid choice if retry is disabled",function(a){stdout="";promptly.confirm("yes or no: ",{retry:false},function(b){expect(b).to.be.an(Error);expect(b.message).to.not.contain("Invalid choice");expect(stdout).to.contain("yes or no: ");a()});process.stdin.emit("data","bleh\n")})});describe("password()",function(){it("should prompt the user silently",function(a){stdout="";promptly.password("something: ",function(b,c){expect(c).to.be("yeaa");expect(stdout).to.contain("something: ");expect(stdout).to.not.contain("yeaa");a()});process.stdin.emit("data","yeaa\n")});it("should not trim by default",function(a){stdout="";promptly.password("something: ",function(b,c){expect(c).to.be(" yeaa ");expect(stdout).to.contain("something: ");expect(stdout).to.not.contain(" yeaa ");a()});process.stdin.emit("data"," yeaa \n")});it("show allow empty passwords by default",function(a){stdout="";promptly.password("something: ",function(b,c){expect(c).to.be("");expect(stdout).to.contain("something: ");a()});process.stdin.emit("data","\n")})});