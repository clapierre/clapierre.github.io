require(["chai","tests/utils","jquery"],function(d,e,c){var a=d.assert,h=e.clickQuestion,i=e.call,b=e.getInput;var f='<?xml version="1.0" encoding="UTF-8" ?>        <h:html xmlns:h="http://www.w3.org/1999/xhtml"        xmlns:orx="http://openrosa.org/jr/xforms"        xmlns="http://www.w3.org/2002/xforms"        xmlns:xsd="http://www.w3.org/2001/XMLSchema"        xmlns:jr="http://openrosa.org/javarosa"        xmlns:vellum="http://commcarehq.org/xforms/vellum">        <h:head>            <h:title>Untitled Form</h:title>            <model>                <instance>                    <data xmlns:jrm="http://dev.commcarehq.org/jr/xforms"                           xmlns="http://openrosa.org/formdesigner/4BE1309B-ABCF-4184-8175-9E381F3E0DD7"                          uiVersion="1" version="1" name="Untitled Form">                        <node_locked />                        <value_locked />                        <none_locked />                        <normal />                        <group />                    </data>                </instance>                <bind nodeset="/data/node_locked" type="xsd:string" vellum:lock="node" />                <bind nodeset="/data/value_locked" type="xsd:string" vellum:lock="value"/>                <bind nodeset="/data/none_locked" type="xsd:string" vellum:lock="none" />                <bind nodeset="/data/normal" type="xsd:string" />                <bind nodeset="/data/group" />                <itext>                    <translation lang="en" default="">                        <text id="node_locked-label">                            <value>node_locked</value>                        </text>                        <text id="value_locked-label">                            <value>value_locked</value>                        </text>                        <text id="none_locked-label">                            <value>none_locked</value>                        </text>                        <text id="normal-label">                            <value>normal</value>                        </text>                    </translation>                </itext>            </model>        </h:head>        <h:body>            <input ref="/data/node_locked">                <label ref="jr:itext(\'node_locked-label\')" />            </input>            <input ref="/data/value_locked">                <label ref="jr:itext(\'value_locked-label\')" />            </input>            <input ref="/data/none_locked">                <label ref="jr:itext(\'none_locked-label\')" />            </input>            <input ref="/data/normal">                <label ref="jr:itext(\'normal-label\')" />            </input>            <group ref="/data/group"></group>        </h:body>    </h:html>';function g(j){e.init({javaRosa:{langs:["en"]},core:{onReady:function(){i("loadXFormOrError",f,j)}}})}describe("The Lock plugin",function(){before(g);function k(n,o){return i("isPropertyLocked",n,o)}function m(n){return i("isMugPathMoveable",n)}function l(n){return i("isMugRemoveable",i("getMugByPath",n),n)}function j(n){return i("isMugTypeChangeable",i("getMugByPath",n),n)}it("preserves XML with vellum:lock attributes",function(){e.assertXmlEqual(f,i("createXML"))});it("disallows renaming a locked node",function(){a(k("/data/node_locked","nodeID"));a(k("/data/value_locked","nodeID"));a.isFalse(k("/data/none_locked","nodeID"));a.isFalse(k("/data/normal","nodeID"))});it("disallows moving a locked node to a different parent",function(){a.isFalse(m("/data/node_locked"));a.isFalse(m("/data/value_locked"));a(m("/data/none_locked"));a(m("/data/normal"))});it("disallows deleting a locked node",function(){a.isFalse(l("/data/node_locked"));a.isFalse(l("/data/value_locked"));a(l("/data/none_locked"));a(l("/data/normal"))});it("disallows changing the type only of a 'value' locked node",function(){a.isFalse(j("/data/value_locked"));a(j("/data/node_locked"));a(j("/data/none_locked"));a(j("/data/normal"))});it("allows changing only the Itext IDs of a 'value' locked node",function(){a.isFalse(k("/data/value_locked","constraintMsgItext"));a(k("/data/value_locked","constraintAttr"))});it("allows changing any property of a non-locked node",function(){a.isFalse(k("/data/node_locked"));a.isFalse(k("/data/none_locked"));a.isFalse(k("/data/normal"))})});describe("The question locking functionality in the core and UI",function(){before(g);describe("The edit locking",function(){it("shows the delete button for deleteable questions",function(){h("normal");a(c("button:contains(Delete)").length===1)});it("hides the delete button for non-deletable questions",function(){h("node_locked");a(c("button:contains(Delete)").length===0)});function k(l){h(l?"normal":"value_locked");var m=c(".btn.current-question");a(m.length===1);m.click();a.equal(m.next().find('li:contains("Cannot Change Question Type")').length,+!l)}it("shows the type changer for type-changeable questions",function(){k(true)});it("hides the type changer for non-type-changeable questions",function(){k(false)});it("disables the checkbox (only) for a locked boolean property",function(){h("value_locked");a(b("requiredAttr").prop("disabled"));h("normal");var l=b("requiredAttr");a.isFalse(l.prop("disabled"))});it("disables the text input (only) for a locked text property",function(){h("normal");a.isFalse(b("nodeID").prop("disabled"));h("value_locked");a(b("nodeID").prop("disabled"))});function j(m){h(m?"value_locked":"normal");var l=b("relevantAttr").parents(".control-group").find("button:contains(Edit)");a.equal(1,l.length);a.equal(m,l.prop("disabled"))}it("enables the edit button for non-locked logic properties",function(){j(false)});it("disables the edit button for locked logic properties",function(){j(true)})});return})});