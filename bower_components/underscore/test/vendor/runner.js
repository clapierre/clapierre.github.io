var url=phantom.args[0],page=require("webpage").create();page.onConsoleMessage=function(a){console.log(a)};page.onInitialized=function(){page.evaluate(addLogging)};page.open(url,function(a){if(a!=="success"){console.log("Unable to access network: "+a);phantom.exit(1)}else{var b=setInterval(function(){if(finished()){clearInterval(b);onfinishedTests()}},500)}});function finished(){return page.evaluate(function(){return !!window.qunitDone})}function onfinishedTests(){var a=page.evaluate(function(){return JSON.stringify(window.qunitDone)});phantom.exit(JSON.parse(a).failed>0?1:0)}function addLogging(){window.document.addEventListener("DOMContentLoaded",function(){var a=[];QUnit.testDone(function(b){var d,c=b.module+": "+b.name;if(b.failed){console.log("Assertion Failed: "+c);for(d=0;d<a.length;d++){console.log("    "+a[d])}}a=[]});QUnit.log(function(c){var b;if(c.result){return}b=c.message||"";if(typeof c.expected!=="undefined"){if(b){b+=", "}b+="expected: "+c.expected+", but was: "+c.actual}a.push("Failed assertion: "+b)});QUnit.done(function(b){console.log("Took "+b.runtime+"ms to run "+b.total+" tests. "+b.passed+" passed, "+b.failed+" failed.");window.qunitDone=b})},false)};