describe("EquivalentXml",function(){it("should consider a document equivalent to itself",function(){var a=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");expect(a).beEquivalentTo(a)});it("should compare non-XML content based on its string representation",function(){expect(null).beEquivalentTo(null);expect("").beEquivalentTo("");expect("").beEquivalentTo(null);expect("foo").beEquivalentTo("foo");expect("foo").not.beEquivalentTo("bar");var a=XML("<doc xmlns='foo:bar'><first order='1'>foo  bar baz</first><second>things</second></doc>");expect(a).not.beEquivalentTo(null)});it("should ensure that attributes match",function(){var b=XML("<doc xmlns='foo:bar'><first order='1'>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'><first order='2'>foo  bar baz</first><second>things</second></doc>");expect(b).not.beEquivalentTo(a);b=XML("<doc xmlns='foo:bar'><first order='1'>foo  bar baz</first><second>things</second></doc>");a=XML("<doc xmlns='foo:bar'><first order='1'>foo  bar baz</first><second>things</second></doc>");expect(b).beEquivalentTo(a)});it("shouldn't care about attribute order",function(){var b=XML("<doc xmlns='foo:bar'><first order='1' value='quux'>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'><first value='quux' order='1'>foo  bar baz</first><second>things</second></doc>");expect(b).beEquivalentTo(a)});it("shouldn't care about element order by default",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'><second>things</second><first>foo  bar baz</first></doc>");expect(b).beEquivalentTo(a)});it("should care about element order if :element_order => true is specified",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'><second>things</second><first>foo  bar baz</first></doc>");expect(b).not.beEquivalentTo(a,{element_order:true})});it("should ensure nodesets have the same number of elements",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'><second>things</second><first>foo  bar baz</first><third/></doc>");expect(b).not.beEquivalentTo(a)});it("should ensure namespaces match",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:baz'><first>foo  bar baz</first><second>things</second></doc>");expect(b).not.beEquivalentTo(a)});it("should compare namespaces based on URI, not on prefix",function(){var b=XML("<doc xmlns:foo='foo:bar'><foo:first>foo  bar baz</foo:first><foo:second>things</foo:second></doc>");var a=XML("<doc xmlns:baz='foo:bar'><baz:first>foo  bar baz</baz:first><baz:second>things</baz:second></doc>");expect(b).beEquivalentTo(a)});it("should not matter where the namespace is defined",function(){var b=XML("<doc xmlns:foo='foo:bar'><foo:first/></doc>");var a=XML("<doc><first xmlns='foo:bar'/></doc>");expect(b).beEquivalentTo(a)});it("should ignore declared but unused namespaces",function(){var b=XML("<doc xmlns:foo='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc><first>foo  bar baz</first><second>things</second></doc>");expect(b).beEquivalentTo(a)});it("should normalize simple whitespace by default",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'><first>foo bar  baz</first><second>things</second></doc>");expect(b).beEquivalentTo(a)});it("shouldn't normalize simple whitespace if :normalize_whitespace => false is specified",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'><first>foo bar  baz</first><second>things</second></doc>");expect(b).not.beEquivalentTo(a,{normalize_whitespace:false})});it("should normalize complex whitespace by default",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'>\n  <second>things</second>\n  <first>\n    foo\n    bar baz\n  </first>\n</doc>");expect(b).beEquivalentTo(a)});it("shouldn't normalize complex whitespace if :normalize_whitespace => false is specified",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'>\n  <second>things</second>\n  <first>\n    foo\n    bar baz\n  </first>\n</doc>");expect(b).not.beEquivalentTo(a,{normalize_whitespace:false})});it("should ignore comment nodes",function(){var b=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");var a=XML("<doc xmlns='foo:bar'>\n  <second>things</second>\n  <!-- Comment Node -->\n  <first>\n    foo\n    bar baz\n  </first>\n</doc>");expect(b).beEquivalentTo(a)});it("should properly handle a mixture of text and element nodes",function(){var b=XML("<doc xmlns='foo:bar'><phrase>This phrase <b>has bold text</b> in it.</phrase></doc>");var a=XML("<doc xmlns='foo:bar'><phrase>This phrase in <b>has bold text</b> it.</phrase></doc>");expect(b).not.beEquivalentTo(a)});it("should properly handle documents passed in as strings",function(){var b="<doc xmlns='foo:bar'><first order='1'>foo  bar baz</first><second>things</second></doc>";var a="<doc xmlns='foo:bar'><first order='1'>foo  bar baz</first><second>things</second></doc>";expect(b).beEquivalentTo(a);b="<doc xmlns='foo:bar'><first order='1'>foo  bar baz</first><second>things</second></doc>";a="<doc xmlns='foo:bar'><first order='1'>foo  bar baz quux</first><second>things</second></doc>";expect(b).not.beEquivalentTo(a)});it("should compare nodesets",function(){var a=XML("<doc xmlns='foo:bar'><first>foo  bar baz</first><second>things</second></doc>");expect(a.childNodes[0].childNodes).beEquivalentTo(a.childNodes[0].childNodes)});it("should compare cdata",function(){var c=XML("<doc xmlns='foo:bar'><first><![CDATA[bits & bobs]]></first><second></second></doc>");var b=XML("<doc xmlns='foo:bar'><second></second><first><![CDATA[bits & bobs]]></first></doc>");var a=XML("<doc xmlns='foo:bar'><first><![CDATA[nuts & bolts]]></first><second></second></doc>");expect(c).beEquivalentTo(b);expect(c).not.beEquivalentTo(a)});it("should compare cdata to normal text element",function(){var c=XML("<doc xmlns='foo:bar'><first><![CDATA[bits & bobs]]></first><second></second></doc>");var b=XML("<doc xmlns='foo:bar'><second></second><first>bits &amp; bobs</first></doc>");var a=XML("<doc xmlns='foo:bar'><first>nuts &amp; bolts</first><second></second></doc>");expect(c).beEquivalentTo(b);expect(c).not.beEquivalentTo(a)})});